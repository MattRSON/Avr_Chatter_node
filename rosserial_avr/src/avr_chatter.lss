
avr_chatter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a6  00800060  000024dc  00002570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c7  00800206  00800206  00002716  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000435e  00000000  00000000  000028f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010df  00000000  00000000  00006c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001215  00000000  00000000  00007d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000864  00000000  00000000  00008f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025e4  00000000  00000000  000097ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002971  00000000  00000000  0000bd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000e701  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_11>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	bf 0d       	add	r27, r15

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	12 e0       	ldi	r17, 0x02	; 2
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ec ed       	ldi	r30, 0xDC	; 220
      6a:	f4 e2       	ldi	r31, 0x24	; 36
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a6 30       	cpi	r26, 0x06	; 6
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	26 e0       	ldi	r18, 0x06	; 6
      7a:	a6 e0       	ldi	r26, 0x06	; 6
      7c:	b2 e0       	ldi	r27, 0x02	; 2
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	ad 3c       	cpi	r26, 0xCD	; 205
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 30 10 	call	0x2060	; 0x2060 <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <main>
      a2:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <__vector_11>:
volatile static uint32_t timer0_ticks = 0;
volatile static uint32_t overflow_ms = 0;

// The Timer0 overflow interrupt handler
ISR (TIMER0_OVF_vect)
{
      aa:	1f 92       	push	r1
      ac:	0f 92       	push	r0
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	0f 92       	push	r0
      b2:	11 24       	eor	r1, r1
      b4:	2f 93       	push	r18
      b6:	8f 93       	push	r24
      b8:	9f 93       	push	r25
      ba:	af 93       	push	r26
      bc:	bf 93       	push	r27
	// Add an overflow's worth of time
	timer0_ticks += CLOCK_TICKS_PER_TIMER0_OVERFLOW;
      be:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer0_ticks>
      c2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <timer0_ticks+0x1>
      c6:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <timer0_ticks+0x2>
      ca:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <timer0_ticks+0x3>
      ce:	90 5c       	subi	r25, 0xC0	; 192
      d0:	af 4f       	sbci	r26, 0xFF	; 255
      d2:	bf 4f       	sbci	r27, 0xFF	; 255
	for(; timer0_ticks > CLOCK_TICKS_PER_MS; timer0_ticks -= CLOCK_TICKS_PER_MS)
      d4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer0_ticks>
      d8:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <timer0_ticks+0x1>
      dc:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <timer0_ticks+0x2>
      e0:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <timer0_ticks+0x3>
      e4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer0_ticks>
      e8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <timer0_ticks+0x1>
      ec:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <timer0_ticks+0x2>
      f0:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <timer0_ticks+0x3>
      f4:	81 34       	cpi	r24, 0x41	; 65
      f6:	9f 41       	sbci	r25, 0x1F	; 31
      f8:	a1 05       	cpc	r26, r1
      fa:	b1 05       	cpc	r27, r1
      fc:	00 f1       	brcs	.+64     	; 0x13e <__vector_11+0x94>
	{
		overflow_ms++;
      fe:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     102:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
     106:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__data_end+0x2>
     10a:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__data_end+0x3>
     10e:	01 96       	adiw	r24, 0x01	; 1
     110:	a1 1d       	adc	r26, r1
     112:	b1 1d       	adc	r27, r1
     114:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
     118:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
     11c:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <__data_end+0x2>
     120:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <__data_end+0x3>
// The Timer0 overflow interrupt handler
ISR (TIMER0_OVF_vect)
{
	// Add an overflow's worth of time
	timer0_ticks += CLOCK_TICKS_PER_TIMER0_OVERFLOW;
	for(; timer0_ticks > CLOCK_TICKS_PER_MS; timer0_ticks -= CLOCK_TICKS_PER_MS)
     124:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer0_ticks>
     128:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <timer0_ticks+0x1>
     12c:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <timer0_ticks+0x2>
     130:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <timer0_ticks+0x3>
     134:	80 54       	subi	r24, 0x40	; 64
     136:	9f 41       	sbci	r25, 0x1F	; 31
     138:	a1 09       	sbc	r26, r1
     13a:	b1 09       	sbc	r27, r1
     13c:	cb cf       	rjmp	.-106    	; 0xd4 <__vector_11+0x2a>
	{
		overflow_ms++;
	}
}
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	2f 91       	pop	r18
     148:	0f 90       	pop	r0
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	0f 90       	pop	r0
     14e:	1f 90       	pop	r1
     150:	18 95       	reti

00000152 <avr_time_init>:

// Initialize the 8-bit Timer 0.
void avr_time_init(void)
{
	// Prescale Timer 0 to devide by 64
	TCCR0 |= (1<<CS01) | (1<<CS00);
     152:	83 b7       	in	r24, 0x33	; 51
     154:	83 60       	ori	r24, 0x03	; 3
     156:	83 bf       	out	0x33, r24	; 51
	// Enable Timer 0 overflow interrupt
	TIMSK |= (1<<TOIE0);
     158:	89 b7       	in	r24, 0x39	; 57
     15a:	81 60       	ori	r24, 0x01	; 1
     15c:	89 bf       	out	0x39, r24	; 57
     15e:	08 95       	ret

00000160 <avr_time_now>:
uint32_t avr_time_now(void)
{
	uint32_t now;

	// Disable interrupts
	cli();
     160:	f8 94       	cli
	now = overflow_ms;
     162:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end>
     166:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x1>
     16a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end+0x2>
     16e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x3>
	sei();
     172:	78 94       	sei

	return now;
}
     174:	08 95       	ret

00000176 <avr_uart_init>:
// Initialize the UART
void avr_uart_init(void)
{
    // Enable bidirectional UART

    UCSRB |= (1<<RXEN)|(1<<TXEN);
     176:	8a b1       	in	r24, 0x0a	; 10
     178:	88 61       	ori	r24, 0x18	; 24
     17a:	8a b9       	out	0x0a, r24	; 10
    //Use 8-bit characters | set mode: 8 data bits, no parity, 1 stop bit
    UCSRC |= (1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);
     17c:	80 b5       	in	r24, 0x20	; 32
     17e:	86 68       	ori	r24, 0x86	; 134
     180:	80 bd       	out	0x20, r24	; 32
    // Set the Baud rate
    UBRRH = (UBRR_VAL >> 8);
     182:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRR_VAL;
     184:	87 e0       	ldi	r24, 0x07	; 7
     186:	89 b9       	out	0x09, r24	; 9
     188:	08 95       	ret

0000018a <avr_uart_send_byte>:

// Send one char (blocking)
void avr_uart_send_byte(uint8_t tx_byte)
{
    // Wait to be able to transmit
    while((UCSRA & (1<<UDRE)) == 0)
     18a:	5d 99       	sbic	0x0b, 5	; 11
     18c:	02 c0       	rjmp	.+4      	; 0x192 <avr_uart_send_byte+0x8>
        asm volatile("nop"::);
     18e:	00 00       	nop
     190:	fc cf       	rjmp	.-8      	; 0x18a <avr_uart_send_byte>
    // Put the data into the send buffer
    UDR = tx_byte;
     192:	8c b9       	out	0x0c, r24	; 12
     194:	08 95       	ret

00000196 <avr_uart_receive_byte>:
}

// Get one char if available, otherwise -1
int16_t avr_uart_receive_byte(void)
{
    if(!(UCSRA & (1<<RXC)))
     196:	5f 99       	sbic	0x0b, 7	; 11
     198:	03 c0       	rjmp	.+6      	; 0x1a0 <avr_uart_receive_byte+0xa>
    {
        return UDR;
     19a:	8c b1       	in	r24, 0x0c	; 12
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	08 95       	ret
    }
    else
    {
        return -1;
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	9f ef       	ldi	r25, 0xFF	; 255
    }
}
     1a4:	08 95       	ret

000001a6 <__cxa_pure_virtual>:
  #include <util/delay.h>
}

// Needed for AVR to use virtual functions
extern "C" void __cxa_pure_virtual(void);
void __cxa_pure_virtual(void) {}
     1a6:	08 95       	ret

000001a8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	8c 01       	movw	r16, r24
     1ba:	eb 01       	movw	r28, r22
  uint32_t nsec_part = nsec % 1000000000UL;
     1bc:	68 81       	ld	r22, Y
     1be:	79 81       	ldd	r23, Y+1	; 0x01
     1c0:	8a 81       	ldd	r24, Y+2	; 0x02
     1c2:	9b 81       	ldd	r25, Y+3	; 0x03
  uint32_t sec_part = nsec / 1000000000UL;
  sec += sec_part;
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3a ec       	ldi	r19, 0xCA	; 202
     1c8:	4a e9       	ldi	r20, 0x9A	; 154
     1ca:	5b e3       	ldi	r21, 0x3B	; 59
     1cc:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__udivmodsi4>
     1d0:	f8 01       	movw	r30, r16
     1d2:	c0 80       	ld	r12, Z
     1d4:	d1 80       	ldd	r13, Z+1	; 0x01
     1d6:	e2 80       	ldd	r14, Z+2	; 0x02
     1d8:	f3 80       	ldd	r15, Z+3	; 0x03
     1da:	c2 0e       	add	r12, r18
     1dc:	d3 1e       	adc	r13, r19
     1de:	e4 1e       	adc	r14, r20
     1e0:	f5 1e       	adc	r15, r21
     1e2:	c0 82       	st	Z, r12
     1e4:	d1 82       	std	Z+1, r13	; 0x01
     1e6:	e2 82       	std	Z+2, r14	; 0x02
     1e8:	f3 82       	std	Z+3, r15	; 0x03
  nsec = nsec_part;
     1ea:	68 83       	st	Y, r22
     1ec:	79 83       	std	Y+1, r23	; 0x01
     1ee:	8a 83       	std	Y+2, r24	; 0x02
     1f0:	9b 83       	std	Y+3, r25	; 0x03
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	08 95       	ret

00000204 <_ZN3ros4Time8fromNSecEl>:

Time& Time::fromNSec(int32_t t)
{
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	ec 01       	movw	r28, r24
  sec = t / 1000000000;
     20a:	cb 01       	movw	r24, r22
     20c:	ba 01       	movw	r22, r20
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	3a ec       	ldi	r19, 0xCA	; 202
     212:	4a e9       	ldi	r20, 0x9A	; 154
     214:	5b e3       	ldi	r21, 0x3B	; 59
     216:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__divmodsi4>
     21a:	28 83       	st	Y, r18
     21c:	39 83       	std	Y+1, r19	; 0x01
     21e:	4a 83       	std	Y+2, r20	; 0x02
     220:	5b 83       	std	Y+3, r21	; 0x03
  nsec = t % 1000000000;
     222:	6c 83       	std	Y+4, r22	; 0x04
     224:	7d 83       	std	Y+5, r23	; 0x05
     226:	8e 83       	std	Y+6, r24	; 0x06
     228:	9f 83       	std	Y+7, r25	; 0x07
  normalizeSecNSec(sec, nsec);
     22a:	be 01       	movw	r22, r28
     22c:	6c 5f       	subi	r22, 0xFC	; 252
     22e:	7f 4f       	sbci	r23, 0xFF	; 255
     230:	ce 01       	movw	r24, r28
     232:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN3ros16normalizeSecNSecERmS0_>
  return *this;
}
     236:	ce 01       	movw	r24, r28
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <_ZN3ros4TimepLERKNS_8DurationE>:

Time& Time::operator +=(const Duration &rhs)
{
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
  sec = sec - 1 + rhs.sec;
     248:	88 81       	ld	r24, Y
     24a:	99 81       	ldd	r25, Y+1	; 0x01
     24c:	aa 81       	ldd	r26, Y+2	; 0x02
     24e:	bb 81       	ldd	r27, Y+3	; 0x03
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	a1 09       	sbc	r26, r1
     254:	b1 09       	sbc	r27, r1
     256:	fb 01       	movw	r30, r22
     258:	00 81       	ld	r16, Z
     25a:	11 81       	ldd	r17, Z+1	; 0x01
     25c:	22 81       	ldd	r18, Z+2	; 0x02
     25e:	33 81       	ldd	r19, Z+3	; 0x03
     260:	80 0f       	add	r24, r16
     262:	91 1f       	adc	r25, r17
     264:	a2 1f       	adc	r26, r18
     266:	b3 1f       	adc	r27, r19
     268:	88 83       	st	Y, r24
     26a:	99 83       	std	Y+1, r25	; 0x01
     26c:	aa 83       	std	Y+2, r26	; 0x02
     26e:	bb 83       	std	Y+3, r27	; 0x03
  nsec = nsec + 1000000000UL + rhs.nsec;
     270:	8c 81       	ldd	r24, Y+4	; 0x04
     272:	9d 81       	ldd	r25, Y+5	; 0x05
     274:	ae 81       	ldd	r26, Y+6	; 0x06
     276:	bf 81       	ldd	r27, Y+7	; 0x07
     278:	96 53       	subi	r25, 0x36	; 54
     27a:	a5 46       	sbci	r26, 0x65	; 101
     27c:	b4 4c       	sbci	r27, 0xC4	; 196
     27e:	44 81       	ldd	r20, Z+4	; 0x04
     280:	55 81       	ldd	r21, Z+5	; 0x05
     282:	66 81       	ldd	r22, Z+6	; 0x06
     284:	77 81       	ldd	r23, Z+7	; 0x07
     286:	84 0f       	add	r24, r20
     288:	95 1f       	adc	r25, r21
     28a:	a6 1f       	adc	r26, r22
     28c:	b7 1f       	adc	r27, r23
     28e:	8c 83       	std	Y+4, r24	; 0x04
     290:	9d 83       	std	Y+5, r25	; 0x05
     292:	ae 83       	std	Y+6, r26	; 0x06
     294:	bf 83       	std	Y+7, r27	; 0x07
  normalizeSecNSec(sec, nsec);
     296:	be 01       	movw	r22, r28
     298:	6c 5f       	subi	r22, 0xFC	; 252
     29a:	7f 4f       	sbci	r23, 0xFF	; 255
     29c:	ce 01       	movw	r24, r28
     29e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN3ros16normalizeSecNSecERmS0_>
  return *this;
}
     2a2:	ce 01       	movw	r24, r28
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	08 95       	ret

000002ae <_ZN3ros4TimemIERKNS_8DurationE>:

Time& Time::operator -=(const Duration &rhs){
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	ec 01       	movw	r28, r24
  sec = sec - 1 - rhs.sec;
     2b8:	88 81       	ld	r24, Y
     2ba:	99 81       	ldd	r25, Y+1	; 0x01
     2bc:	aa 81       	ldd	r26, Y+2	; 0x02
     2be:	bb 81       	ldd	r27, Y+3	; 0x03
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	a1 09       	sbc	r26, r1
     2c4:	b1 09       	sbc	r27, r1
     2c6:	fb 01       	movw	r30, r22
     2c8:	00 81       	ld	r16, Z
     2ca:	11 81       	ldd	r17, Z+1	; 0x01
     2cc:	22 81       	ldd	r18, Z+2	; 0x02
     2ce:	33 81       	ldd	r19, Z+3	; 0x03
     2d0:	80 1b       	sub	r24, r16
     2d2:	91 0b       	sbc	r25, r17
     2d4:	a2 0b       	sbc	r26, r18
     2d6:	b3 0b       	sbc	r27, r19
     2d8:	88 83       	st	Y, r24
     2da:	99 83       	std	Y+1, r25	; 0x01
     2dc:	aa 83       	std	Y+2, r26	; 0x02
     2de:	bb 83       	std	Y+3, r27	; 0x03
  nsec = nsec + 1000000000UL - rhs.nsec;
     2e0:	8c 81       	ldd	r24, Y+4	; 0x04
     2e2:	9d 81       	ldd	r25, Y+5	; 0x05
     2e4:	ae 81       	ldd	r26, Y+6	; 0x06
     2e6:	bf 81       	ldd	r27, Y+7	; 0x07
     2e8:	96 53       	subi	r25, 0x36	; 54
     2ea:	a5 46       	sbci	r26, 0x65	; 101
     2ec:	b4 4c       	sbci	r27, 0xC4	; 196
     2ee:	44 81       	ldd	r20, Z+4	; 0x04
     2f0:	55 81       	ldd	r21, Z+5	; 0x05
     2f2:	66 81       	ldd	r22, Z+6	; 0x06
     2f4:	77 81       	ldd	r23, Z+7	; 0x07
     2f6:	84 1b       	sub	r24, r20
     2f8:	95 0b       	sbc	r25, r21
     2fa:	a6 0b       	sbc	r26, r22
     2fc:	b7 0b       	sbc	r27, r23
     2fe:	8c 83       	std	Y+4, r24	; 0x04
     300:	9d 83       	std	Y+5, r25	; 0x05
     302:	ae 83       	std	Y+6, r26	; 0x06
     304:	bf 83       	std	Y+7, r27	; 0x07
  normalizeSecNSec(sec, nsec);
     306:	be 01       	movw	r22, r28
     308:	6c 5f       	subi	r22, 0xFC	; 252
     30a:	7f 4f       	sbci	r23, 0xFF	; 255
     30c:	ce 01       	movw	r24, r28
     30e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN3ros16normalizeSecNSecERmS0_>
  return *this;
}
     312:	ce 01       	movw	r24, r28
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	08 95       	ret

0000031e <_ZNK3ros4TimemiERKS0_>:

Duration Time::operator-(const Time &rhs) const {
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	60 97       	sbiw	r28, 0x10	; 16
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	fb 01       	movw	r30, r22
  // Note: Considers wrap around as a continuation of time, e.g.,
  // (0,0) - (0xFFFFFFFF, 0) = (1, 0)
  Duration d;
  d.sec = sec > rhs.sec ? sec - rhs.sec : -(rhs.sec - sec);
     338:	dc 01       	movw	r26, r24
     33a:	4d 91       	ld	r20, X+
     33c:	5d 91       	ld	r21, X+
     33e:	6d 91       	ld	r22, X+
     340:	7c 91       	ld	r23, X
     342:	13 97       	sbiw	r26, 0x03	; 3
     344:	00 81       	ld	r16, Z
     346:	11 81       	ldd	r17, Z+1	; 0x01
     348:	22 81       	ldd	r18, Z+2	; 0x02
     34a:	33 81       	ldd	r19, Z+3	; 0x03
     34c:	40 1b       	sub	r20, r16
     34e:	51 0b       	sbc	r21, r17
     350:	62 0b       	sbc	r22, r18
     352:	73 0b       	sbc	r23, r19
     354:	49 87       	std	Y+9, r20	; 0x09
     356:	5a 87       	std	Y+10, r21	; 0x0a
     358:	6b 87       	std	Y+11, r22	; 0x0b
     35a:	7c 87       	std	Y+12, r23	; 0x0c
  d.nsec = nsec > rhs.nsec ? nsec - rhs.nsec : -(rhs.nsec - nsec);
     35c:	14 96       	adiw	r26, 0x04	; 4
     35e:	0d 91       	ld	r16, X+
     360:	1d 91       	ld	r17, X+
     362:	2d 91       	ld	r18, X+
     364:	3c 91       	ld	r19, X
     366:	17 97       	sbiw	r26, 0x07	; 7
     368:	44 81       	ldd	r20, Z+4	; 0x04
     36a:	55 81       	ldd	r21, Z+5	; 0x05
     36c:	66 81       	ldd	r22, Z+6	; 0x06
     36e:	77 81       	ldd	r23, Z+7	; 0x07
     370:	d9 01       	movw	r26, r18
     372:	c8 01       	movw	r24, r16
     374:	84 1b       	sub	r24, r20
     376:	95 0b       	sbc	r25, r21
     378:	a6 0b       	sbc	r26, r22
     37a:	b7 0b       	sbc	r27, r23
     37c:	8d 87       	std	Y+13, r24	; 0x0d
     37e:	9e 87       	std	Y+14, r25	; 0x0e
     380:	af 87       	std	Y+15, r26	; 0x0f
     382:	b8 8b       	std	Y+16, r27	; 0x10
  normalizeSecNSecSigned(d.sec, d.nsec);
     384:	be 01       	movw	r22, r28
     386:	63 5f       	subi	r22, 0xF3	; 243
     388:	7f 4f       	sbci	r23, 0xFF	; 255
     38a:	ce 01       	movw	r24, r28
     38c:	09 96       	adiw	r24, 0x09	; 9
     38e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return d;
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	fe 01       	movw	r30, r28
     396:	39 96       	adiw	r30, 0x09	; 9
     398:	de 01       	movw	r26, r28
     39a:	11 96       	adiw	r26, 0x01	; 1
     39c:	01 90       	ld	r0, Z+
     39e:	0d 92       	st	X+, r0
     3a0:	8a 95       	dec	r24
     3a2:	e1 f7       	brne	.-8      	; 0x39c <_ZNK3ros4TimemiERKS0_+0x7e>
     3a4:	29 81       	ldd	r18, Y+1	; 0x01
     3a6:	3a 81       	ldd	r19, Y+2	; 0x02
     3a8:	4b 81       	ldd	r20, Y+3	; 0x03
     3aa:	5c 81       	ldd	r21, Y+4	; 0x04
     3ac:	6d 81       	ldd	r22, Y+5	; 0x05
     3ae:	7e 81       	ldd	r23, Y+6	; 0x06
}
     3b0:	8f 81       	ldd	r24, Y+7	; 0x07
     3b2:	98 85       	ldd	r25, Y+8	; 0x08
     3b4:	60 96       	adiw	r28, 0x10	; 16
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <_ZN3ros22normalizeSecNSecSignedERlS0_>:
#include "ros/duration.h"

namespace ros
{
void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
{
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	fb 01       	movw	r30, r22
  int32_t nsec_part = nsec;
     3d0:	40 81       	ld	r20, Z
     3d2:	51 81       	ldd	r21, Z+1	; 0x01
     3d4:	62 81       	ldd	r22, Z+2	; 0x02
     3d6:	73 81       	ldd	r23, Z+3	; 0x03
  int32_t sec_part = sec;
     3d8:	dc 01       	movw	r26, r24
     3da:	0d 91       	ld	r16, X+
     3dc:	1d 91       	ld	r17, X+
     3de:	2d 91       	ld	r18, X+
     3e0:	3c 91       	ld	r19, X

  while (nsec_part > 1000000000L)
     3e2:	41 30       	cpi	r20, 0x01	; 1
     3e4:	ba ec       	ldi	r27, 0xCA	; 202
     3e6:	5b 07       	cpc	r21, r27
     3e8:	ba e9       	ldi	r27, 0x9A	; 154
     3ea:	6b 07       	cpc	r22, r27
     3ec:	bb e3       	ldi	r27, 0x3B	; 59
     3ee:	7b 07       	cpc	r23, r27
     3f0:	44 f0       	brlt	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
  {
    nsec_part -= 1000000000L;
     3f2:	5a 5c       	subi	r21, 0xCA	; 202
     3f4:	6a 49       	sbci	r22, 0x9A	; 154
     3f6:	7b 43       	sbci	r23, 0x3B	; 59
    ++sec_part;
     3f8:	0f 5f       	subi	r16, 0xFF	; 255
     3fa:	1f 4f       	sbci	r17, 0xFF	; 255
     3fc:	2f 4f       	sbci	r18, 0xFF	; 255
     3fe:	3f 4f       	sbci	r19, 0xFF	; 255
void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
{
  int32_t nsec_part = nsec;
  int32_t sec_part = sec;

  while (nsec_part > 1000000000L)
     400:	f0 cf       	rjmp	.-32     	; 0x3e2 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x18>
  {
    nsec_part -= 1000000000L;
    ++sec_part;
  }
  while (nsec_part < 0)
     402:	77 ff       	sbrs	r23, 7
     404:	08 c0       	rjmp	.+16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
  {
    nsec_part += 1000000000L;
     406:	56 53       	subi	r21, 0x36	; 54
     408:	65 46       	sbci	r22, 0x65	; 101
     40a:	74 4c       	sbci	r23, 0xC4	; 196
    --sec_part;
     40c:	01 50       	subi	r16, 0x01	; 1
     40e:	11 09       	sbc	r17, r1
     410:	21 09       	sbc	r18, r1
     412:	31 09       	sbc	r19, r1
  while (nsec_part > 1000000000L)
  {
    nsec_part -= 1000000000L;
    ++sec_part;
  }
  while (nsec_part < 0)
     414:	f6 cf       	rjmp	.-20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
  {
    nsec_part += 1000000000L;
    --sec_part;
  }
  sec = sec_part;
     416:	dc 01       	movw	r26, r24
     418:	0d 93       	st	X+, r16
     41a:	1d 93       	st	X+, r17
     41c:	2d 93       	st	X+, r18
     41e:	3c 93       	st	X, r19
     420:	13 97       	sbiw	r26, 0x03	; 3
  nsec = nsec_part;
     422:	40 83       	st	Z, r20
     424:	51 83       	std	Z+1, r21	; 0x01
     426:	62 83       	std	Z+2, r22	; 0x02
     428:	73 83       	std	Z+3, r23	; 0x03
}
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	08 95       	ret

00000430 <_ZN3ros8DurationpLERKS0_>:

Duration& Duration::operator+=(const Duration &rhs)
{
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ec 01       	movw	r28, r24
  sec += rhs.sec;
     43a:	08 81       	ld	r16, Y
     43c:	19 81       	ldd	r17, Y+1	; 0x01
     43e:	2a 81       	ldd	r18, Y+2	; 0x02
     440:	3b 81       	ldd	r19, Y+3	; 0x03
     442:	fb 01       	movw	r30, r22
     444:	80 81       	ld	r24, Z
     446:	91 81       	ldd	r25, Z+1	; 0x01
     448:	a2 81       	ldd	r26, Z+2	; 0x02
     44a:	b3 81       	ldd	r27, Z+3	; 0x03
     44c:	80 0f       	add	r24, r16
     44e:	91 1f       	adc	r25, r17
     450:	a2 1f       	adc	r26, r18
     452:	b3 1f       	adc	r27, r19
     454:	88 83       	st	Y, r24
     456:	99 83       	std	Y+1, r25	; 0x01
     458:	aa 83       	std	Y+2, r26	; 0x02
     45a:	bb 83       	std	Y+3, r27	; 0x03
  nsec += rhs.nsec;
     45c:	0c 81       	ldd	r16, Y+4	; 0x04
     45e:	1d 81       	ldd	r17, Y+5	; 0x05
     460:	2e 81       	ldd	r18, Y+6	; 0x06
     462:	3f 81       	ldd	r19, Y+7	; 0x07
     464:	84 81       	ldd	r24, Z+4	; 0x04
     466:	95 81       	ldd	r25, Z+5	; 0x05
     468:	a6 81       	ldd	r26, Z+6	; 0x06
     46a:	b7 81       	ldd	r27, Z+7	; 0x07
     46c:	80 0f       	add	r24, r16
     46e:	91 1f       	adc	r25, r17
     470:	a2 1f       	adc	r26, r18
     472:	b3 1f       	adc	r27, r19
     474:	8c 83       	std	Y+4, r24	; 0x04
     476:	9d 83       	std	Y+5, r25	; 0x05
     478:	ae 83       	std	Y+6, r26	; 0x06
     47a:	bf 83       	std	Y+7, r27	; 0x07
  normalizeSecNSecSigned(sec, nsec);
     47c:	be 01       	movw	r22, r28
     47e:	6c 5f       	subi	r22, 0xFC	; 252
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	ce 01       	movw	r24, r28
     484:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return *this;
}
     488:	ce 01       	movw	r24, r28
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	08 95       	ret

00000494 <_ZN3ros8DurationmIERKS0_>:

Duration& Duration::operator-=(const Duration &rhs)
{
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
  sec += -rhs.sec;
     49e:	88 81       	ld	r24, Y
     4a0:	99 81       	ldd	r25, Y+1	; 0x01
     4a2:	aa 81       	ldd	r26, Y+2	; 0x02
     4a4:	bb 81       	ldd	r27, Y+3	; 0x03
     4a6:	fb 01       	movw	r30, r22
     4a8:	00 81       	ld	r16, Z
     4aa:	11 81       	ldd	r17, Z+1	; 0x01
     4ac:	22 81       	ldd	r18, Z+2	; 0x02
     4ae:	33 81       	ldd	r19, Z+3	; 0x03
     4b0:	80 1b       	sub	r24, r16
     4b2:	91 0b       	sbc	r25, r17
     4b4:	a2 0b       	sbc	r26, r18
     4b6:	b3 0b       	sbc	r27, r19
     4b8:	88 83       	st	Y, r24
     4ba:	99 83       	std	Y+1, r25	; 0x01
     4bc:	aa 83       	std	Y+2, r26	; 0x02
     4be:	bb 83       	std	Y+3, r27	; 0x03
  nsec += -rhs.nsec;
     4c0:	8c 81       	ldd	r24, Y+4	; 0x04
     4c2:	9d 81       	ldd	r25, Y+5	; 0x05
     4c4:	ae 81       	ldd	r26, Y+6	; 0x06
     4c6:	bf 81       	ldd	r27, Y+7	; 0x07
     4c8:	44 81       	ldd	r20, Z+4	; 0x04
     4ca:	55 81       	ldd	r21, Z+5	; 0x05
     4cc:	66 81       	ldd	r22, Z+6	; 0x06
     4ce:	77 81       	ldd	r23, Z+7	; 0x07
     4d0:	84 1b       	sub	r24, r20
     4d2:	95 0b       	sbc	r25, r21
     4d4:	a6 0b       	sbc	r26, r22
     4d6:	b7 0b       	sbc	r27, r23
     4d8:	8c 83       	std	Y+4, r24	; 0x04
     4da:	9d 83       	std	Y+5, r25	; 0x05
     4dc:	ae 83       	std	Y+6, r26	; 0x06
     4de:	bf 83       	std	Y+7, r27	; 0x07
  normalizeSecNSecSigned(sec, nsec);
     4e0:	be 01       	movw	r22, r28
     4e2:	6c 5f       	subi	r22, 0xFC	; 252
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	ce 01       	movw	r24, r28
     4e8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return *this;
}
     4ec:	ce 01       	movw	r24, r28
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <_ZN3ros8DurationmLEd>:

Duration& Duration::operator*=(double scale)
{
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
     506:	6a 01       	movw	r12, r20
     508:	7b 01       	movw	r14, r22
  sec *= scale;
     50a:	68 81       	ld	r22, Y
     50c:	79 81       	ldd	r23, Y+1	; 0x01
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	9b 81       	ldd	r25, Y+3	; 0x03
     512:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__floatsisf>
     516:	a7 01       	movw	r20, r14
     518:	96 01       	movw	r18, r12
     51a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__mulsf3>
     51e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__fixsfsi>
     522:	68 83       	st	Y, r22
     524:	79 83       	std	Y+1, r23	; 0x01
     526:	8a 83       	std	Y+2, r24	; 0x02
     528:	9b 83       	std	Y+3, r25	; 0x03
  nsec *= scale;
     52a:	6c 81       	ldd	r22, Y+4	; 0x04
     52c:	7d 81       	ldd	r23, Y+5	; 0x05
     52e:	8e 81       	ldd	r24, Y+6	; 0x06
     530:	9f 81       	ldd	r25, Y+7	; 0x07
     532:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__floatsisf>
     536:	a7 01       	movw	r20, r14
     538:	96 01       	movw	r18, r12
     53a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__mulsf3>
     53e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__fixsfsi>
     542:	6c 83       	std	Y+4, r22	; 0x04
     544:	7d 83       	std	Y+5, r23	; 0x05
     546:	8e 83       	std	Y+6, r24	; 0x06
     548:	9f 83       	std	Y+7, r25	; 0x07
  normalizeSecNSecSigned(sec, nsec);
     54a:	be 01       	movw	r22, r28
     54c:	6c 5f       	subi	r22, 0xFC	; 252
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	ce 01       	movw	r24, r28
     552:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return *this;
}
     556:	ce 01       	movw	r24, r28
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	08 95       	ret

00000566 <_ZNK8std_msgs4Time9serializeEPh>:
    Time():
      data()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     566:	dc 01       	movw	r26, r24
     568:	fb 01       	movw	r30, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
     56a:	12 96       	adiw	r26, 0x02	; 2
     56c:	8c 91       	ld	r24, X
     56e:	12 97       	sbiw	r26, 0x02	; 2
     570:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
     572:	13 96       	adiw	r26, 0x03	; 3
     574:	8c 91       	ld	r24, X
     576:	13 97       	sbiw	r26, 0x03	; 3
     578:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
     57a:	14 96       	adiw	r26, 0x04	; 4
     57c:	8c 91       	ld	r24, X
     57e:	14 97       	sbiw	r26, 0x04	; 4
     580:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
     582:	15 96       	adiw	r26, 0x05	; 5
     584:	8c 91       	ld	r24, X
     586:	15 97       	sbiw	r26, 0x05	; 5
     588:	83 83       	std	Z+3, r24	; 0x03
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
     58a:	16 96       	adiw	r26, 0x06	; 6
     58c:	8c 91       	ld	r24, X
     58e:	16 97       	sbiw	r26, 0x06	; 6
     590:	84 83       	std	Z+4, r24	; 0x04
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
     592:	17 96       	adiw	r26, 0x07	; 7
     594:	8c 91       	ld	r24, X
     596:	17 97       	sbiw	r26, 0x07	; 7
     598:	85 83       	std	Z+5, r24	; 0x05
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
     59a:	18 96       	adiw	r26, 0x08	; 8
     59c:	8c 91       	ld	r24, X
     59e:	18 97       	sbiw	r26, 0x08	; 8
     5a0:	86 83       	std	Z+6, r24	; 0x06
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
     5a2:	19 96       	adiw	r26, 0x09	; 9
     5a4:	8c 91       	ld	r24, X
     5a6:	87 83       	std	Z+7, r24	; 0x07
      offset += sizeof(this->data.nsec);
      return offset;
    }
     5a8:	88 e0       	ldi	r24, 0x08	; 8
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	08 95       	ret

000005ae <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
     5ae:	fc 01       	movw	r30, r24
     5b0:	db 01       	movw	r26, r22
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
     5b2:	4c 91       	ld	r20, X
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	42 83       	std	Z+2, r20	; 0x02
     5bc:	53 83       	std	Z+3, r21	; 0x03
     5be:	64 83       	std	Z+4, r22	; 0x04
     5c0:	75 83       	std	Z+5, r23	; 0x05
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
     5c2:	11 96       	adiw	r26, 0x01	; 1
     5c4:	8c 91       	ld	r24, X
     5c6:	11 97       	sbiw	r26, 0x01	; 1
     5c8:	58 2b       	or	r21, r24
     5ca:	42 83       	std	Z+2, r20	; 0x02
     5cc:	53 83       	std	Z+3, r21	; 0x03
     5ce:	64 83       	std	Z+4, r22	; 0x04
     5d0:	75 83       	std	Z+5, r23	; 0x05
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
     5d2:	12 96       	adiw	r26, 0x02	; 2
     5d4:	8c 91       	ld	r24, X
     5d6:	12 97       	sbiw	r26, 0x02	; 2
     5d8:	68 2b       	or	r22, r24
     5da:	42 83       	std	Z+2, r20	; 0x02
     5dc:	53 83       	std	Z+3, r21	; 0x03
     5de:	64 83       	std	Z+4, r22	; 0x04
     5e0:	75 83       	std	Z+5, r23	; 0x05
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
     5e2:	13 96       	adiw	r26, 0x03	; 3
     5e4:	8c 91       	ld	r24, X
     5e6:	13 97       	sbiw	r26, 0x03	; 3
     5e8:	78 2b       	or	r23, r24
     5ea:	42 83       	std	Z+2, r20	; 0x02
     5ec:	53 83       	std	Z+3, r21	; 0x03
     5ee:	64 83       	std	Z+4, r22	; 0x04
     5f0:	75 83       	std	Z+5, r23	; 0x05
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
     5f2:	14 96       	adiw	r26, 0x04	; 4
     5f4:	4c 91       	ld	r20, X
     5f6:	14 97       	sbiw	r26, 0x04	; 4
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	46 83       	std	Z+6, r20	; 0x06
     600:	57 83       	std	Z+7, r21	; 0x07
     602:	60 87       	std	Z+8, r22	; 0x08
     604:	71 87       	std	Z+9, r23	; 0x09
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
     606:	15 96       	adiw	r26, 0x05	; 5
     608:	8c 91       	ld	r24, X
     60a:	15 97       	sbiw	r26, 0x05	; 5
     60c:	58 2b       	or	r21, r24
     60e:	46 83       	std	Z+6, r20	; 0x06
     610:	57 83       	std	Z+7, r21	; 0x07
     612:	60 87       	std	Z+8, r22	; 0x08
     614:	71 87       	std	Z+9, r23	; 0x09
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
     616:	16 96       	adiw	r26, 0x06	; 6
     618:	8c 91       	ld	r24, X
     61a:	16 97       	sbiw	r26, 0x06	; 6
     61c:	68 2b       	or	r22, r24
     61e:	46 83       	std	Z+6, r20	; 0x06
     620:	57 83       	std	Z+7, r21	; 0x07
     622:	60 87       	std	Z+8, r22	; 0x08
     624:	71 87       	std	Z+9, r23	; 0x09
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
     626:	17 96       	adiw	r26, 0x07	; 7
     628:	8c 91       	ld	r24, X
     62a:	78 2b       	or	r23, r24
     62c:	46 83       	std	Z+6, r20	; 0x06
     62e:	57 83       	std	Z+7, r21	; 0x07
     630:	60 87       	std	Z+8, r22	; 0x08
     632:	71 87       	std	Z+9, r23	; 0x09
      offset += sizeof(this->data.nsec);
     return offset;
    }
     634:	88 e0       	ldi	r24, 0x08	; 8
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	08 95       	ret

0000063a <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
     63a:	8f e8       	ldi	r24, 0x8F	; 143
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	08 95       	ret

00000640 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
     640:	8d e9       	ldi	r24, 0x9D	; 157
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	08 95       	ret

00000646 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
     646:	8e eb       	ldi	r24, 0xBE	; 190
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	08 95       	ret

0000064c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
     64c:	87 ed       	ldi	r24, 0xD7	; 215
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	08 95       	ret

00000652 <_ZN14rosserial_msgs3Log7getTypeEv>:
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
     652:	88 ef       	ldi	r24, 0xF8	; 248
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	08 95       	ret

00000658 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
     658:	8b e0       	ldi	r24, 0x0B	; 11
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	08 95       	ret

0000065e <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    virtual const char * getType() override { return REQUESTPARAM; };
     65e:	83 e7       	ldi	r24, 0x73	; 115
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	08 95       	ret

00000664 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
     664:	8c e2       	ldi	r24, 0x2C	; 44
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	08 95       	ret

0000066a <_ZN8std_msgs6String7getTypeEv>:
      this->data = (char *)(inbuffer + offset-1);
      offset += length_data;
     return offset;
    }

    virtual const char * getType() override { return "std_msgs/String"; };
     66a:	8d e4       	ldi	r24, 0x4D	; 77
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	08 95       	ret

00000670 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
     670:	8d e5       	ldi	r24, 0x5D	; 93
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	08 95       	ret

00000676 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE9connectedEv>:


  /* Are we connected to the PC? */
  virtual bool connected() override
  {
    return configured_;
     676:	8f 57       	subi	r24, 0x7F	; 127
     678:	9b 4f       	sbci	r25, 0xFB	; 251
  };
     67a:	fc 01       	movw	r30, r24
     67c:	80 81       	ld	r24, Z
     67e:	08 95       	ret

00000680 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg) override
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	00 d0       	rcall	.+0      	; 0x692 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x12>
     692:	00 d0       	rcall	.+0      	; 0x694 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14>
     694:	1f 92       	push	r1
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
  {
    if (id >= 100 && !configured_)
     69a:	64 36       	cpi	r22, 0x64	; 100
     69c:	71 05       	cpc	r23, r1
     69e:	3c f0       	brlt	.+14     	; 0x6ae <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2e>
     6a0:	fc 01       	movw	r30, r24
     6a2:	ef 57       	subi	r30, 0x7F	; 127
     6a4:	fb 4f       	sbci	r31, 0xFB	; 251
     6a6:	20 81       	ld	r18, Z
     6a8:	22 23       	and	r18, r18
     6aa:	09 f4       	brne	.+2      	; 0x6ae <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2e>
     6ac:	6d c0       	rjmp	.+218    	; 0x788 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x108>
     6ae:	da 01       	movw	r26, r20
     6b0:	7b 01       	movw	r14, r22
     6b2:	8c 01       	movw	r16, r24
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
     6b4:	bc 01       	movw	r22, r24
     6b6:	66 5e       	subi	r22, 0xE6	; 230
     6b8:	7d 4f       	sbci	r23, 0xFD	; 253
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	01 90       	ld	r0, Z+
     6c0:	f0 81       	ld	r31, Z
     6c2:	e0 2d       	mov	r30, r0
     6c4:	ca 01       	movw	r24, r20
     6c6:	09 95       	icall

    /* setup the header */
    message_out[0] = 0xff;
     6c8:	68 01       	movw	r12, r16
     6ca:	2d ee       	ldi	r18, 0xED	; 237
     6cc:	c2 1a       	sub	r12, r18
     6ce:	2d ef       	ldi	r18, 0xFD	; 253
     6d0:	d2 0a       	sbc	r13, r18
     6d2:	2f ef       	ldi	r18, 0xFF	; 255
     6d4:	d6 01       	movw	r26, r12
     6d6:	2c 93       	st	X, r18
    message_out[1] = PROTOCOL_VER;
     6d8:	f8 01       	movw	r30, r16
     6da:	ec 5e       	subi	r30, 0xEC	; 236
     6dc:	fd 4f       	sbci	r31, 0xFD	; 253
     6de:	2e ef       	ldi	r18, 0xFE	; 254
     6e0:	20 83       	st	Z, r18
    message_out[2] = (uint8_t)((uint16_t)l & 255);
     6e2:	31 96       	adiw	r30, 0x01	; 1
     6e4:	80 83       	st	Z, r24
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
     6e6:	31 96       	adiw	r30, 0x01	; 1
     6e8:	90 83       	st	Z, r25
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
     6ea:	31 96       	adiw	r30, 0x01	; 1
     6ec:	29 2f       	mov	r18, r25
     6ee:	28 0f       	add	r18, r24
     6f0:	20 95       	com	r18
     6f2:	20 83       	st	Z, r18
    message_out[5] = (uint8_t)((int16_t)id & 255);
     6f4:	31 96       	adiw	r30, 0x01	; 1
     6f6:	e0 82       	st	Z, r14
    message_out[6] = (uint8_t)((int16_t)id >> 8);
     6f8:	16 96       	adiw	r26, 0x06	; 6
     6fa:	fc 92       	st	X, r15

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
     6fc:	45 e0       	ldi	r20, 0x05	; 5
     6fe:	50 e0       	ldi	r21, 0x00	; 0
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
    message_out[5] = (uint8_t)((int16_t)id & 255);
    message_out[6] = (uint8_t)((int16_t)id >> 8);

    /* calculate checksum */
    int chk = 0;
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
    for (int i = 5; i < l + 7; i++)
     704:	dc 01       	movw	r26, r24
     706:	16 96       	adiw	r26, 0x06	; 6
     708:	a4 17       	cp	r26, r20
     70a:	b5 07       	cpc	r27, r21
     70c:	34 f0       	brlt	.+12     	; 0x71a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9a>
      chk += message_out[i];
     70e:	61 91       	ld	r22, Z+
     710:	26 0f       	add	r18, r22
     712:	31 1d       	adc	r19, r1
    message_out[5] = (uint8_t)((int16_t)id & 255);
    message_out[6] = (uint8_t)((int16_t)id >> 8);

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
     714:	4f 5f       	subi	r20, 0xFF	; 255
     716:	5f 4f       	sbci	r21, 0xFF	; 255
     718:	f7 cf       	rjmp	.-18     	; 0x708 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x88>
      chk += message_out[i];
    l += 7;
    message_out[l++] = 255 - (chk % 256);
     71a:	7c 01       	movw	r14, r24
     71c:	b8 e0       	ldi	r27, 0x08	; 8
     71e:	eb 0e       	add	r14, r27
     720:	f1 1c       	adc	r15, r1
     722:	80 0f       	add	r24, r16
     724:	91 1f       	adc	r25, r17
     726:	fc 01       	movw	r30, r24
     728:	e6 5e       	subi	r30, 0xE6	; 230
     72a:	fd 4f       	sbci	r31, 0xFD	; 253
     72c:	20 95       	com	r18
     72e:	20 83       	st	Z, r18

    if (l <= OUTPUT_SIZE)
     730:	e1 e0       	ldi	r30, 0x01	; 1
     732:	ee 16       	cp	r14, r30
     734:	e2 e0       	ldi	r30, 0x02	; 2
     736:	fe 06       	cpc	r15, r30
     738:	6c f4       	brge	.+26     	; 0x754 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xd4>
    {
      hardware_.write(message_out, l);
     73a:	86 01       	movw	r16, r12


    // Send a byte of data to ROS connection
    void write(uint8_t* data, int length)
    {
      for(int i = 0; i < length; i++)
     73c:	c8 01       	movw	r24, r16
     73e:	8c 19       	sub	r24, r12
     740:	9d 09       	sbc	r25, r13
     742:	8e 15       	cp	r24, r14
     744:	9f 05       	cpc	r25, r15
     746:	1c f5       	brge	.+70     	; 0x78e <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
      {
        avr_uart_send_byte(data[i]);
     748:	d8 01       	movw	r26, r16
     74a:	8d 91       	ld	r24, X+
     74c:	8d 01       	movw	r16, r26
     74e:	0e 94 c5 00 	call	0x18a	; 0x18a <avr_uart_send_byte>
     752:	f4 cf       	rjmp	.-24     	; 0x73c <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbc>
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
     754:	8b ed       	ldi	r24, 0xDB	; 219
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	9a 83       	std	Y+2, r25	; 0x02
     75a:	89 83       	std	Y+1, r24	; 0x01

protected:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
     75c:	83 e0       	ldi	r24, 0x03	; 3
     75e:	8b 83       	std	Y+3, r24	; 0x03
    l.msg = (char*)msg;
     760:	8e e7       	ldi	r24, 0x7E	; 126
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	9d 83       	std	Y+5, r25	; 0x05
     766:	8c 83       	std	Y+4, r24	; 0x04
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
     768:	d8 01       	movw	r26, r16
     76a:	ed 91       	ld	r30, X+
     76c:	fc 91       	ld	r31, X
     76e:	01 90       	ld	r0, Z+
     770:	f0 81       	ld	r31, Z
     772:	e0 2d       	mov	r30, r0
     774:	ae 01       	movw	r20, r28
     776:	4f 5f       	subi	r20, 0xFF	; 255
     778:	5f 4f       	sbci	r21, 0xFF	; 255
     77a:	67 e0       	ldi	r22, 0x07	; 7
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	c8 01       	movw	r24, r16
     780:	09 95       	icall
      return l;
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	9f ef       	ldi	r25, 0xFF	; 255
     786:	04 c0       	rjmp	.+8      	; 0x790 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x110>
  }

  virtual int publish(int id, const Msg * msg) override
  {
    if (id >= 100 && !configured_)
      return 0;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	01 c0       	rjmp	.+2      	; 0x790 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x110>


    // Send a byte of data to ROS connection
    void write(uint8_t* data, int length)
    {
      for(int i = 0; i < length; i++)
     78e:	c7 01       	movw	r24, r14
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	cf 90       	pop	r12
     7aa:	08 95       	ret

000007ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
  {
    for (size_t i = 0; i < sizeof(V); i++)
      arr[i] = (var >> (8 * i));
     7b8:	6a 01       	movw	r12, r20
     7ba:	7b 01       	movw	r14, r22
     7bc:	02 2e       	mov	r0, r18
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x1c>
     7c0:	f6 94       	lsr	r15
     7c2:	e7 94       	ror	r14
     7c4:	d7 94       	ror	r13
     7c6:	c7 94       	ror	r12
     7c8:	0a 94       	dec	r0
     7ca:	d2 f7       	brpl	.-12     	; 0x7c0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x14>
     7cc:	fc 01       	movw	r30, r24
     7ce:	c1 92       	st	Z+, r12
     7d0:	cf 01       	movw	r24, r30
     7d2:	28 5f       	subi	r18, 0xF8	; 248
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
  {
    for (size_t i = 0; i < sizeof(V); i++)
     7d6:	20 32       	cpi	r18, 0x20	; 32
     7d8:	31 05       	cpc	r19, r1
     7da:	71 f7       	brne	.-36     	; 0x7b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xc>
      arr[i] = (var >> (8 * i));
  }
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	08 95       	ret

000007e6 <_ZNK8std_msgs6String9serializeEPh>:
    String():
      data("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	7c 01       	movw	r14, r24
     7f4:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      uint32_t length_data = strlen(this->data);
     7f6:	dc 01       	movw	r26, r24
     7f8:	12 96       	adiw	r26, 0x02	; 2
     7fa:	ed 91       	ld	r30, X+
     7fc:	fc 91       	ld	r31, X
     7fe:	13 97       	sbiw	r26, 0x03	; 3
     800:	ef 01       	movw	r28, r30
     802:	09 90       	ld	r0, Y+
     804:	00 20       	and	r0, r0
     806:	e9 f7       	brne	.-6      	; 0x802 <_ZNK8std_msgs6String9serializeEPh+0x1c>
     808:	21 97       	sbiw	r28, 0x01	; 1
     80a:	ce 1b       	sub	r28, r30
     80c:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_data);
     80e:	ae 01       	movw	r20, r28
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	c8 01       	movw	r24, r16
     816:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->data, length_data);
     81a:	f7 01       	movw	r30, r14
     81c:	62 81       	ldd	r22, Z+2	; 0x02
     81e:	73 81       	ldd	r23, Z+3	; 0x03
     820:	ae 01       	movw	r20, r28
     822:	c8 01       	movw	r24, r16
     824:	04 96       	adiw	r24, 0x04	; 4
     826:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
      offset += length_data;
      return offset;
    }
     82a:	ce 01       	movw	r24, r28
     82c:	04 96       	adiw	r24, 0x04	; 4
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	08 95       	ret

0000083c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     83c:	4f 92       	push	r4
     83e:	5f 92       	push	r5
     840:	6f 92       	push	r6
     842:	7f 92       	push	r7
     844:	af 92       	push	r10
     846:	bf 92       	push	r11
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	ec 01       	movw	r28, r24
     85a:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	fb 01       	movw	r30, r22
     860:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
     862:	8b 81       	ldd	r24, Y+3	; 0x03
     864:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
     866:	8c 81       	ldd	r24, Y+4	; 0x04
     868:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
     86a:	8d 81       	ldd	r24, Y+5	; 0x05
     86c:	83 83       	std	Z+3, r24	; 0x03
     86e:	db 01       	movw	r26, r22
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	ba 01       	movw	r22, r20
      int offset = 0;
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
     876:	e4 e0       	ldi	r30, 0x04	; 4
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	14 96       	adiw	r26, 0x04	; 4
      for( uint32_t i = 0; i < ints_length; i++){
     87c:	ca 80       	ldd	r12, Y+2	; 0x02
     87e:	db 80       	ldd	r13, Y+3	; 0x03
     880:	ec 80       	ldd	r14, Y+4	; 0x04
     882:	fd 80       	ldd	r15, Y+5	; 0x05
     884:	cf 01       	movw	r24, r30
     886:	04 96       	adiw	r24, 0x04	; 4
     888:	4c 15       	cp	r20, r12
     88a:	5d 05       	cpc	r21, r13
     88c:	6e 05       	cpc	r22, r14
     88e:	7f 05       	cpc	r23, r15
     890:	c8 f4       	brcc	.+50     	; 0x8c4 <__stack+0x65>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
     892:	2a 85       	ldd	r18, Y+10	; 0x0a
     894:	3b 85       	ldd	r19, Y+11	; 0x0b
     896:	e2 0f       	add	r30, r18
     898:	f3 1f       	adc	r31, r19
     89a:	34 97       	sbiw	r30, 0x04	; 4
     89c:	d0 80       	ld	r13, Z
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
     89e:	f1 80       	ldd	r15, Z+1	; 0x01
     8a0:	32 81       	ldd	r19, Z+2	; 0x02
     8a2:	23 81       	ldd	r18, Z+3	; 0x03
     8a4:	dc 92       	st	X, r13
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
     8a6:	11 96       	adiw	r26, 0x01	; 1
     8a8:	fc 92       	st	X, r15
     8aa:	11 97       	sbiw	r26, 0x01	; 1
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
     8ac:	12 96       	adiw	r26, 0x02	; 2
     8ae:	3c 93       	st	X, r19
     8b0:	12 97       	sbiw	r26, 0x02	; 2
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
     8b2:	13 96       	adiw	r26, 0x03	; 3
     8b4:	2c 93       	st	X, r18
     8b6:	13 97       	sbiw	r26, 0x03	; 3
     8b8:	fc 01       	movw	r30, r24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints_length);
      for( uint32_t i = 0; i < ints_length; i++){
     8ba:	4f 5f       	subi	r20, 0xFF	; 255
     8bc:	5f 4f       	sbci	r21, 0xFF	; 255
     8be:	6f 4f       	sbci	r22, 0xFF	; 255
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	db cf       	rjmp	.-74     	; 0x87a <__stack+0x1b>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
     8c4:	5f 01       	movw	r10, r30
     8c6:	a0 0e       	add	r10, r16
     8c8:	b1 1e       	adc	r11, r17
     8ca:	2c 85       	ldd	r18, Y+12	; 0x0c
     8cc:	f5 01       	movw	r30, r10
     8ce:	20 83       	st	Z, r18
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
     8d0:	2d 85       	ldd	r18, Y+13	; 0x0d
     8d2:	21 83       	std	Z+1, r18	; 0x01
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
     8d4:	2e 85       	ldd	r18, Y+14	; 0x0e
     8d6:	22 83       	std	Z+2, r18	; 0x02
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
     8d8:	2f 85       	ldd	r18, Y+15	; 0x0f
     8da:	23 83       	std	Z+3, r18	; 0x03
     8dc:	d5 01       	movw	r26, r10
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	ba 01       	movw	r22, r20
     8e4:	cc 84       	ldd	r12, Y+12	; 0x0c
     8e6:	dd 84       	ldd	r13, Y+13	; 0x0d
     8e8:	ee 84       	ldd	r14, Y+14	; 0x0e
     8ea:	ff 84       	ldd	r15, Y+15	; 0x0f
     8ec:	9c 01       	movw	r18, r24
     8ee:	2c 5f       	subi	r18, 0xFC	; 252
     8f0:	3f 4f       	sbci	r19, 0xFF	; 255
     8f2:	4c 15       	cp	r20, r12
     8f4:	5d 05       	cpc	r21, r13
     8f6:	6e 05       	cpc	r22, r14
     8f8:	7f 05       	cpc	r23, r15
     8fa:	f8 f4       	brcc	.+62     	; 0x93a <__stack+0xdb>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
     8fc:	cd 01       	movw	r24, r26
     8fe:	8a 19       	sub	r24, r10
     900:	9b 09       	sbc	r25, r11
     902:	ec 88       	ldd	r14, Y+20	; 0x14
     904:	fd 88       	ldd	r15, Y+21	; 0x15
     906:	8e 0d       	add	r24, r14
     908:	9f 1d       	adc	r25, r15
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
     90a:	fc 01       	movw	r30, r24
     90c:	d0 80       	ld	r13, Z
     90e:	e1 80       	ldd	r14, Z+1	; 0x01
     910:	f2 80       	ldd	r15, Z+2	; 0x02
     912:	83 81       	ldd	r24, Z+3	; 0x03
     914:	14 96       	adiw	r26, 0x04	; 4
     916:	dc 92       	st	X, r13
     918:	14 97       	sbiw	r26, 0x04	; 4
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
     91a:	15 96       	adiw	r26, 0x05	; 5
     91c:	ec 92       	st	X, r14
     91e:	15 97       	sbiw	r26, 0x05	; 5
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
     920:	16 96       	adiw	r26, 0x06	; 6
     922:	fc 92       	st	X, r15
     924:	16 97       	sbiw	r26, 0x06	; 6
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
     926:	17 96       	adiw	r26, 0x07	; 7
     928:	8c 93       	st	X, r24
     92a:	17 97       	sbiw	r26, 0x07	; 7
     92c:	c9 01       	movw	r24, r18
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats_length);
      for( uint32_t i = 0; i < floats_length; i++){
     92e:	4f 5f       	subi	r20, 0xFF	; 255
     930:	5f 4f       	sbci	r21, 0xFF	; 255
     932:	6f 4f       	sbci	r22, 0xFF	; 255
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	14 96       	adiw	r26, 0x04	; 4
     938:	d5 cf       	rjmp	.-86     	; 0x8e4 <__stack+0x85>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
     93a:	f8 01       	movw	r30, r16
     93c:	e8 0f       	add	r30, r24
     93e:	f9 1f       	adc	r31, r25
     940:	8e 89       	ldd	r24, Y+22	; 0x16
     942:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
     944:	8f 89       	ldd	r24, Y+23	; 0x17
     946:	81 83       	std	Z+1, r24	; 0x01
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
     948:	88 8d       	ldd	r24, Y+24	; 0x18
     94a:	82 83       	std	Z+2, r24	; 0x02
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
     94c:	89 8d       	ldd	r24, Y+25	; 0x19
     94e:	83 83       	std	Z+3, r24	; 0x03
      offset += sizeof(this->strings_length);
     950:	79 01       	movw	r14, r18
     952:	a1 2c       	mov	r10, r1
     954:	b1 2c       	mov	r11, r1
      for( uint32_t i = 0; i < strings_length; i++){
     956:	41 2c       	mov	r4, r1
     958:	51 2c       	mov	r5, r1
     95a:	32 01       	movw	r6, r4
     95c:	8e 89       	ldd	r24, Y+22	; 0x16
     95e:	9f 89       	ldd	r25, Y+23	; 0x17
     960:	a8 8d       	ldd	r26, Y+24	; 0x18
     962:	b9 8d       	ldd	r27, Y+25	; 0x19
     964:	48 16       	cp	r4, r24
     966:	59 06       	cpc	r5, r25
     968:	6a 06       	cpc	r6, r26
     96a:	7b 06       	cpc	r7, r27
     96c:	80 f5       	brcc	.+96     	; 0x9ce <__stack+0x16f>
      uint32_t length_stringsi = strlen(this->strings[i]);
     96e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     970:	fd 8d       	ldd	r31, Y+29	; 0x1d
     972:	ea 0d       	add	r30, r10
     974:	fb 1d       	adc	r31, r11
     976:	a0 81       	ld	r26, Z
     978:	b1 81       	ldd	r27, Z+1	; 0x01
     97a:	fd 01       	movw	r30, r26
     97c:	01 90       	ld	r0, Z+
     97e:	00 20       	and	r0, r0
     980:	e9 f7       	brne	.-6      	; 0x97c <__stack+0x11d>
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	6f 01       	movw	r12, r30
     986:	ca 1a       	sub	r12, r26
     988:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_stringsi);
     98a:	a6 01       	movw	r20, r12
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	c8 01       	movw	r24, r16
     992:	8e 0d       	add	r24, r14
     994:	9f 1d       	adc	r25, r15
     996:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
     99a:	f4 e0       	ldi	r31, 0x04	; 4
     99c:	ef 0e       	add	r14, r31
     99e:	f1 1c       	adc	r15, r1
     9a0:	ec 8d       	ldd	r30, Y+28	; 0x1c
     9a2:	fd 8d       	ldd	r31, Y+29	; 0x1d
     9a4:	ea 0d       	add	r30, r10
     9a6:	fb 1d       	adc	r31, r11
     9a8:	60 81       	ld	r22, Z
     9aa:	71 81       	ldd	r23, Z+1	; 0x01
     9ac:	a6 01       	movw	r20, r12
     9ae:	c8 01       	movw	r24, r16
     9b0:	8e 0d       	add	r24, r14
     9b2:	9f 1d       	adc	r25, r15
     9b4:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
      offset += length_stringsi;
     9b8:	ec 0c       	add	r14, r12
     9ba:	fd 1c       	adc	r15, r13
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
      offset += sizeof(this->strings_length);
      for( uint32_t i = 0; i < strings_length; i++){
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	48 1a       	sub	r4, r24
     9c0:	58 0a       	sbc	r5, r24
     9c2:	68 0a       	sbc	r6, r24
     9c4:	78 0a       	sbc	r7, r24
     9c6:	e2 e0       	ldi	r30, 0x02	; 2
     9c8:	ae 0e       	add	r10, r30
     9ca:	b1 1c       	adc	r11, r1
     9cc:	c7 cf       	rjmp	.-114    	; 0x95c <__stack+0xfd>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
     9ce:	c7 01       	movw	r24, r14
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	7f 90       	pop	r7
     9e6:	6f 90       	pop	r6
     9e8:	5f 90       	pop	r5
     9ea:	4f 90       	pop	r4
     9ec:	08 95       	ret

000009ee <_ZNK14rosserial_msgs3Log9serializeEPh>:
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	8c 01       	movw	r16, r24
     9fc:	7b 01       	movw	r14, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
     9fe:	dc 01       	movw	r26, r24
     a00:	12 96       	adiw	r26, 0x02	; 2
     a02:	2c 91       	ld	r18, X
     a04:	12 97       	sbiw	r26, 0x02	; 2
     a06:	fb 01       	movw	r30, r22
     a08:	21 93       	st	Z+, r18
     a0a:	cf 01       	movw	r24, r30
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	ed 91       	ld	r30, X+
     a10:	fc 91       	ld	r31, X
     a12:	14 97       	sbiw	r26, 0x04	; 4
     a14:	ef 01       	movw	r28, r30
     a16:	09 90       	ld	r0, Y+
     a18:	00 20       	and	r0, r0
     a1a:	e9 f7       	brne	.-6      	; 0xa16 <_ZNK14rosserial_msgs3Log9serializeEPh+0x28>
     a1c:	21 97       	sbiw	r28, 0x01	; 1
     a1e:	ce 1b       	sub	r28, r30
     a20:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_msg);
     a22:	ae 01       	movw	r20, r28
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
     a2c:	d8 01       	movw	r26, r16
     a2e:	13 96       	adiw	r26, 0x03	; 3
     a30:	6d 91       	ld	r22, X+
     a32:	7c 91       	ld	r23, X
     a34:	14 97       	sbiw	r26, 0x04	; 4
     a36:	ae 01       	movw	r20, r28
     a38:	c7 01       	movw	r24, r14
     a3a:	05 96       	adiw	r24, 0x05	; 5
     a3c:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
      offset += length_msg;
      return offset;
    }
     a40:	ce 01       	movw	r24, r28
     a42:	05 96       	adiw	r24, 0x05	; 5
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	08 95       	ret

00000a52 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const override
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	7c 01       	movw	r14, r24
     a64:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
     a66:	dc 01       	movw	r26, r24
     a68:	12 96       	adiw	r26, 0x02	; 2
     a6a:	8c 91       	ld	r24, X
     a6c:	12 97       	sbiw	r26, 0x02	; 2
     a6e:	fb 01       	movw	r30, r22
     a70:	80 83       	st	Z, r24
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
     a72:	13 96       	adiw	r26, 0x03	; 3
     a74:	8c 91       	ld	r24, X
     a76:	13 97       	sbiw	r26, 0x03	; 3
     a78:	81 83       	std	Z+1, r24	; 0x01
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
     a7a:	14 96       	adiw	r26, 0x04	; 4
     a7c:	ed 91       	ld	r30, X+
     a7e:	fc 91       	ld	r31, X
     a80:	15 97       	sbiw	r26, 0x05	; 5
     a82:	ef 01       	movw	r28, r30
     a84:	09 90       	ld	r0, Y+
     a86:	00 20       	and	r0, r0
     a88:	e9 f7       	brne	.-6      	; 0xa84 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x32>
     a8a:	21 97       	sbiw	r28, 0x01	; 1
     a8c:	ce 1b       	sub	r28, r30
     a8e:	df 0b       	sbc	r29, r31
      varToArr(outbuffer + offset, length_topic_name);
     a90:	ae 01       	movw	r20, r28
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	c8 01       	movw	r24, r16
     a98:	02 96       	adiw	r24, 0x02	; 2
     a9a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
     a9e:	d7 01       	movw	r26, r14
     aa0:	14 96       	adiw	r26, 0x04	; 4
     aa2:	6d 91       	ld	r22, X+
     aa4:	7c 91       	ld	r23, X
     aa6:	15 97       	sbiw	r26, 0x05	; 5
     aa8:	ae 01       	movw	r20, r28
     aaa:	c8 01       	movw	r24, r16
     aac:	06 96       	adiw	r24, 0x06	; 6
     aae:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
      offset += length_topic_name;
     ab2:	ce 01       	movw	r24, r28
     ab4:	06 96       	adiw	r24, 0x06	; 6
      uint32_t length_message_type = strlen(this->message_type);
     ab6:	f7 01       	movw	r30, r14
     ab8:	a6 81       	ldd	r26, Z+6	; 0x06
     aba:	b7 81       	ldd	r27, Z+7	; 0x07
     abc:	fd 01       	movw	r30, r26
     abe:	01 90       	ld	r0, Z+
     ac0:	00 20       	and	r0, r0
     ac2:	e9 f7       	brne	.-6      	; 0xabe <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x6c>
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	6f 01       	movw	r12, r30
     ac8:	ca 1a       	sub	r12, r26
     aca:	db 0a       	sbc	r13, r27
      varToArr(outbuffer + offset, length_message_type);
     acc:	a6 01       	movw	r20, r12
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	80 0f       	add	r24, r16
     ad4:	91 1f       	adc	r25, r17
     ad6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
     ada:	2a 96       	adiw	r28, 0x0a	; 10
     adc:	d7 01       	movw	r26, r14
     ade:	16 96       	adiw	r26, 0x06	; 6
     ae0:	6d 91       	ld	r22, X+
     ae2:	7c 91       	ld	r23, X
     ae4:	17 97       	sbiw	r26, 0x07	; 7
     ae6:	a6 01       	movw	r20, r12
     ae8:	c8 01       	movw	r24, r16
     aea:	8c 0f       	add	r24, r28
     aec:	9d 1f       	adc	r25, r29
     aee:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
      offset += length_message_type;
     af2:	cc 0d       	add	r28, r12
     af4:	dd 1d       	adc	r29, r13
      uint32_t length_md5sum = strlen(this->md5sum);
     af6:	d7 01       	movw	r26, r14
     af8:	18 96       	adiw	r26, 0x08	; 8
     afa:	ed 91       	ld	r30, X+
     afc:	fc 91       	ld	r31, X
     afe:	19 97       	sbiw	r26, 0x09	; 9
     b00:	df 01       	movw	r26, r30
     b02:	0d 90       	ld	r0, X+
     b04:	00 20       	and	r0, r0
     b06:	e9 f7       	brne	.-6      	; 0xb02 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0xb0>
     b08:	11 97       	sbiw	r26, 0x01	; 1
     b0a:	6d 01       	movw	r12, r26
     b0c:	ce 1a       	sub	r12, r30
     b0e:	df 0a       	sbc	r13, r31
      varToArr(outbuffer + offset, length_md5sum);
     b10:	a6 01       	movw	r20, r12
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	c8 01       	movw	r24, r16
     b18:	8c 0f       	add	r24, r28
     b1a:	9d 1f       	adc	r25, r29
     b1c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
     b20:	24 96       	adiw	r28, 0x04	; 4
     b22:	f7 01       	movw	r30, r14
     b24:	60 85       	ldd	r22, Z+8	; 0x08
     b26:	71 85       	ldd	r23, Z+9	; 0x09
     b28:	a6 01       	movw	r20, r12
     b2a:	c8 01       	movw	r24, r16
     b2c:	8c 0f       	add	r24, r28
     b2e:	9d 1f       	adc	r25, r29
     b30:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
      offset += length_md5sum;
     b34:	c6 01       	movw	r24, r12
     b36:	8c 0f       	add	r24, r28
     b38:	9d 1f       	adc	r25, r29
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
     b3a:	d7 01       	movw	r26, r14
     b3c:	1a 96       	adiw	r26, 0x0a	; 10
     b3e:	6c 91       	ld	r22, X
     b40:	1a 97       	sbiw	r26, 0x0a	; 10
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
     b42:	1b 96       	adiw	r26, 0x0b	; 11
     b44:	4c 91       	ld	r20, X
     b46:	1b 97       	sbiw	r26, 0x0b	; 11
     b48:	1c 96       	adiw	r26, 0x0c	; 12
     b4a:	3c 91       	ld	r19, X
     b4c:	1c 97       	sbiw	r26, 0x0c	; 12
     b4e:	1d 96       	adiw	r26, 0x0d	; 13
     b50:	2c 91       	ld	r18, X
     b52:	f8 01       	movw	r30, r16
     b54:	e8 0f       	add	r30, r24
     b56:	f9 1f       	adc	r31, r25
     b58:	60 83       	st	Z, r22
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
     b5a:	41 83       	std	Z+1, r20	; 0x01
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
     b5c:	32 83       	std	Z+2, r19	; 0x02
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
     b5e:	23 83       	std	Z+3, r18	; 0x03
      offset += sizeof(this->buffer_size);
      return offset;
    }
     b60:	04 96       	adiw	r24, 0x04	; 4
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	08 95       	ret

00000b74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	fc 01       	movw	r30, r24
  {
    var = 0;
     b7e:	10 82       	st	Z, r1
     b80:	11 82       	std	Z+1, r1	; 0x01
     b82:	12 82       	std	Z+2, r1	; 0x02
     b84:	13 82       	std	Z+3, r1	; 0x03
     b86:	db 01       	movw	r26, r22
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
     b8c:	4d 91       	ld	r20, X+
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	02 2e       	mov	r0, r18
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x24>
     b94:	44 0f       	add	r20, r20
     b96:	55 1f       	adc	r21, r21
     b98:	0a 94       	dec	r0
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x20>
     b9c:	05 2e       	mov	r0, r21
     b9e:	00 0c       	add	r0, r0
     ba0:	66 0b       	sbc	r22, r22
     ba2:	77 0b       	sbc	r23, r23
     ba4:	c0 80       	ld	r12, Z
     ba6:	d1 80       	ldd	r13, Z+1	; 0x01
     ba8:	e2 80       	ldd	r14, Z+2	; 0x02
     baa:	f3 80       	ldd	r15, Z+3	; 0x03
     bac:	4c 29       	or	r20, r12
     bae:	5d 29       	or	r21, r13
     bb0:	6e 29       	or	r22, r14
     bb2:	7f 29       	or	r23, r15
     bb4:	40 83       	st	Z, r20
     bb6:	51 83       	std	Z+1, r21	; 0x01
     bb8:	62 83       	std	Z+2, r22	; 0x02
     bba:	73 83       	std	Z+3, r23	; 0x03
     bbc:	28 5f       	subi	r18, 0xF8	; 248
     bbe:	3f 4f       	sbci	r19, 0xFF	; 255
  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for (size_t i = 0; i < sizeof(V); i++)
     bc0:	20 32       	cpi	r18, 0x20	; 32
     bc2:	31 05       	cpc	r19, r1
     bc4:	19 f7       	brne	.-58     	; 0xb8c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x18>
      var |= (arr[i] << (8 * i));
  }
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	cf 90       	pop	r12
     bce:	08 95       	ret

00000bd0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
     bd0:	4f 92       	push	r4
     bd2:	5f 92       	push	r5
     bd4:	6f 92       	push	r6
     bd6:	7f 92       	push	r7
     bd8:	8f 92       	push	r8
     bda:	9f 92       	push	r9
     bdc:	af 92       	push	r10
     bde:	bf 92       	push	r11
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	00 d0       	rcall	.+0      	; 0xbee <_ZN14rosserial_msgs3Log11deserializeEPh+0x1e>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x20>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	7c 01       	movw	r14, r24
     bf6:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
     bf8:	fb 01       	movw	r30, r22
     bfa:	81 91       	ld	r24, Z+
     bfc:	bf 01       	movw	r22, r30
     bfe:	f7 01       	movw	r30, r14
     c00:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	ab 81       	ldd	r26, Y+3	; 0x03
     c10:	bc 81       	ldd	r27, Y+4	; 0x04
     c12:	4c 01       	movw	r8, r24
     c14:	5d 01       	movw	r10, r26
     c16:	f5 e0       	ldi	r31, 0x05	; 5
     c18:	8f 0e       	add	r8, r31
     c1a:	91 1c       	adc	r9, r1
     c1c:	a1 1c       	adc	r10, r1
     c1e:	b1 1c       	adc	r11, r1
     c20:	a8 01       	movw	r20, r16
     c22:	4c 5f       	subi	r20, 0xFC	; 252
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
     c26:	fa 01       	movw	r30, r20
     c28:	25 e0       	ldi	r18, 0x05	; 5
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	29 01       	movw	r4, r18
     c2e:	61 2c       	mov	r6, r1
     c30:	71 2c       	mov	r7, r1
     c32:	48 14       	cp	r4, r8
     c34:	59 04       	cpc	r5, r9
     c36:	6a 04       	cpc	r6, r10
     c38:	7b 04       	cpc	r7, r11
     c3a:	28 f4       	brcc	.+10     	; 0xc46 <_ZN14rosserial_msgs3Log11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
     c3c:	61 81       	ldd	r22, Z+1	; 0x01
     c3e:	61 93       	st	Z+, r22
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
     c40:	2f 5f       	subi	r18, 0xFF	; 255
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	f3 cf       	rjmp	.-26     	; 0xc2c <_ZN14rosserial_msgs3Log11deserializeEPh+0x5c>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
     c46:	f8 01       	movw	r30, r16
     c48:	e8 0f       	add	r30, r24
     c4a:	f9 1f       	adc	r31, r25
     c4c:	14 82       	std	Z+4, r1	; 0x04
      this->msg = (char *)(inbuffer + offset-1);
     c4e:	f7 01       	movw	r30, r14
     c50:	54 83       	std	Z+4, r21	; 0x04
     c52:	43 83       	std	Z+3, r20	; 0x03
      offset += length_msg;
     return offset;
    }
     c54:	05 96       	adiw	r24, 0x05	; 5
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	9f 90       	pop	r9
     c70:	8f 90       	pop	r8
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	5f 90       	pop	r5
     c78:	4f 90       	pop	r4
     c7a:	08 95       	ret

00000c7c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
     c7c:	4f 92       	push	r4
     c7e:	5f 92       	push	r5
     c80:	6f 92       	push	r6
     c82:	7f 92       	push	r7
     c84:	8f 92       	push	r8
     c86:	9f 92       	push	r9
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	2c 97       	sbiw	r28, 0x0c	; 12
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	7c 01       	movw	r14, r24
     cae:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
     cb0:	db 01       	movw	r26, r22
     cb2:	8c 91       	ld	r24, X
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	f7 01       	movw	r30, r14
     cb8:	93 83       	std	Z+3, r25	; 0x03
     cba:	82 83       	std	Z+2, r24	; 0x02
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
     cbc:	11 96       	adiw	r26, 0x01	; 1
     cbe:	2c 91       	ld	r18, X
     cc0:	92 2b       	or	r25, r18
     cc2:	93 83       	std	Z+3, r25	; 0x03
     cc4:	82 83       	std	Z+2, r24	; 0x02
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
     cc6:	6e 5f       	subi	r22, 0xFE	; 254
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255
     cca:	ce 01       	movw	r24, r28
     ccc:	09 96       	adiw	r24, 0x09	; 9
     cce:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
     cd2:	89 84       	ldd	r8, Y+9	; 0x09
     cd4:	9a 84       	ldd	r9, Y+10	; 0x0a
     cd6:	ab 84       	ldd	r10, Y+11	; 0x0b
     cd8:	bc 84       	ldd	r11, Y+12	; 0x0c
     cda:	24 01       	movw	r4, r8
     cdc:	35 01       	movw	r6, r10
     cde:	f6 e0       	ldi	r31, 0x06	; 6
     ce0:	4f 0e       	add	r4, r31
     ce2:	51 1c       	adc	r5, r1
     ce4:	61 1c       	adc	r6, r1
     ce6:	71 1c       	adc	r7, r1
     ce8:	98 01       	movw	r18, r16
     cea:	2b 5f       	subi	r18, 0xFB	; 251
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	f9 01       	movw	r30, r18
     cf0:	86 e0       	ldi	r24, 0x06	; 6
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	ac 01       	movw	r20, r24
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	44 15       	cp	r20, r4
     cfc:	55 05       	cpc	r21, r5
     cfe:	66 05       	cpc	r22, r6
     d00:	77 05       	cpc	r23, r7
     d02:	20 f4       	brcc	.+8      	; 0xd0c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x90>
          inbuffer[k-1]=inbuffer[k];
     d04:	41 81       	ldd	r20, Z+1	; 0x01
     d06:	41 93       	st	Z+, r20
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	f4 cf       	rjmp	.-24     	; 0xcf4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x78>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
     d0c:	f8 01       	movw	r30, r16
     d0e:	e8 0d       	add	r30, r8
     d10:	f9 1d       	adc	r31, r9
     d12:	15 82       	std	Z+5, r1	; 0x05
      this->topic_name = (char *)(inbuffer + offset-1);
     d14:	d7 01       	movw	r26, r14
     d16:	15 96       	adiw	r26, 0x05	; 5
     d18:	3c 93       	st	X, r19
     d1a:	2e 93       	st	-X, r18
     d1c:	14 97       	sbiw	r26, 0x04	; 4
      offset += length_topic_name;
     d1e:	b4 01       	movw	r22, r8
     d20:	6a 5f       	subi	r22, 0xFA	; 250
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
     d24:	60 0f       	add	r22, r16
     d26:	71 1f       	adc	r23, r17
     d28:	ce 01       	movw	r24, r28
     d2a:	05 96       	adiw	r24, 0x05	; 5
     d2c:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
     d30:	ba e0       	ldi	r27, 0x0A	; 10
     d32:	8b 0e       	add	r8, r27
     d34:	91 1c       	adc	r9, r1
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
     d36:	4d 80       	ldd	r4, Y+5	; 0x05
     d38:	5e 80       	ldd	r5, Y+6	; 0x06
     d3a:	6f 80       	ldd	r6, Y+7	; 0x07
     d3c:	78 84       	ldd	r7, Y+8	; 0x08
     d3e:	a4 01       	movw	r20, r8
     d40:	09 2c       	mov	r0, r9
     d42:	00 0c       	add	r0, r0
     d44:	66 0b       	sbc	r22, r22
     d46:	77 0b       	sbc	r23, r23
     d48:	44 0d       	add	r20, r4
     d4a:	55 1d       	adc	r21, r5
     d4c:	66 1d       	adc	r22, r6
     d4e:	77 1d       	adc	r23, r7
     d50:	d8 01       	movw	r26, r16
     d52:	a8 0d       	add	r26, r8
     d54:	b9 1d       	adc	r27, r9
     d56:	cd 01       	movw	r24, r26
     d58:	80 1b       	sub	r24, r16
     d5a:	91 0b       	sbc	r25, r17
     d5c:	5c 01       	movw	r10, r24
     d5e:	c1 2c       	mov	r12, r1
     d60:	d1 2c       	mov	r13, r1
     d62:	a4 16       	cp	r10, r20
     d64:	b5 06       	cpc	r11, r21
     d66:	c6 06       	cpc	r12, r22
     d68:	d7 06       	cpc	r13, r23
     d6a:	28 f4       	brcc	.+10     	; 0xd76 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xfa>
          inbuffer[k-1]=inbuffer[k];
     d6c:	8d 91       	ld	r24, X+
     d6e:	fd 01       	movw	r30, r26
     d70:	32 97       	sbiw	r30, 0x02	; 2
     d72:	80 83       	st	Z, r24
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
     d74:	f0 cf       	rjmp	.-32     	; 0xd56 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xda>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
     d76:	54 01       	movw	r10, r8
     d78:	a4 0c       	add	r10, r4
     d7a:	b5 1c       	adc	r11, r5
     d7c:	b8 01       	movw	r22, r16
     d7e:	6a 0d       	add	r22, r10
     d80:	7b 1d       	adc	r23, r11
     d82:	fb 01       	movw	r30, r22
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	10 82       	st	Z, r1
      this->message_type = (char *)(inbuffer + offset-1);
     d88:	c4 01       	movw	r24, r8
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	80 0f       	add	r24, r16
     d8e:	91 1f       	adc	r25, r17
     d90:	f7 01       	movw	r30, r14
     d92:	97 83       	std	Z+7, r25	; 0x07
     d94:	86 83       	std	Z+6, r24	; 0x06
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
     d9e:	95 01       	movw	r18, r10
     da0:	2c 5f       	subi	r18, 0xFC	; 252
     da2:	3f 4f       	sbci	r19, 0xFF	; 255
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	ab 81       	ldd	r26, Y+3	; 0x03
     daa:	bc 81       	ldd	r27, Y+4	; 0x04
     dac:	29 01       	movw	r4, r18
     dae:	03 2e       	mov	r0, r19
     db0:	00 0c       	add	r0, r0
     db2:	66 08       	sbc	r6, r6
     db4:	77 08       	sbc	r7, r7
     db6:	48 0e       	add	r4, r24
     db8:	59 1e       	adc	r5, r25
     dba:	6a 1e       	adc	r6, r26
     dbc:	7b 1e       	adc	r7, r27
     dbe:	f5 01       	movw	r30, r10
     dc0:	33 96       	adiw	r30, 0x03	; 3
     dc2:	e0 0f       	add	r30, r16
     dc4:	f1 1f       	adc	r31, r17
     dc6:	a9 01       	movw	r20, r18
     dc8:	4a 01       	movw	r8, r20
     dca:	a1 2c       	mov	r10, r1
     dcc:	b1 2c       	mov	r11, r1
     dce:	84 14       	cp	r8, r4
     dd0:	95 04       	cpc	r9, r5
     dd2:	a6 04       	cpc	r10, r6
     dd4:	b7 04       	cpc	r11, r7
     dd6:	28 f4       	brcc	.+10     	; 0xde2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x166>
          inbuffer[k-1]=inbuffer[k];
     dd8:	61 81       	ldd	r22, Z+1	; 0x01
     dda:	61 93       	st	Z+, r22
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
     ddc:	4f 5f       	subi	r20, 0xFF	; 255
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	f3 cf       	rjmp	.-26     	; 0xdc8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14c>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	f8 01       	movw	r30, r16
     de8:	e8 0f       	add	r30, r24
     dea:	f9 1f       	adc	r31, r25
     dec:	df 01       	movw	r26, r30
     dee:	11 97       	sbiw	r26, 0x01	; 1
     df0:	1c 92       	st	X, r1
      this->md5sum = (char *)(inbuffer + offset-1);
     df2:	21 50       	subi	r18, 0x01	; 1
     df4:	31 09       	sbc	r19, r1
     df6:	02 0f       	add	r16, r18
     df8:	13 1f       	adc	r17, r19
     dfa:	d7 01       	movw	r26, r14
     dfc:	19 96       	adiw	r26, 0x09	; 9
     dfe:	1c 93       	st	X, r17
     e00:	0e 93       	st	-X, r16
     e02:	18 97       	sbiw	r26, 0x08	; 8
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
     e04:	21 81       	ldd	r18, Z+1	; 0x01
     e06:	42 81       	ldd	r20, Z+2	; 0x02
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	ba 01       	movw	r22, r20
     e10:	55 27       	eor	r21, r21
     e12:	44 27       	eor	r20, r20
     e14:	52 2b       	or	r21, r18
     e16:	20 81       	ld	r18, Z
     e18:	42 2b       	or	r20, r18
     e1a:	23 81       	ldd	r18, Z+3	; 0x03
     e1c:	72 2b       	or	r23, r18
     e1e:	f7 01       	movw	r30, r14
     e20:	42 87       	std	Z+10, r20	; 0x0a
     e22:	53 87       	std	Z+11, r21	; 0x0b
     e24:	64 87       	std	Z+12, r22	; 0x0c
     e26:	75 87       	std	Z+13, r23	; 0x0d
      offset += sizeof(this->buffer_size);
     return offset;
    }
     e28:	04 96       	adiw	r24, 0x04	; 4
     e2a:	2c 96       	adiw	r28, 0x0c	; 12
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	8f 90       	pop	r8
     e4e:	7f 90       	pop	r7
     e50:	6f 90       	pop	r6
     e52:	5f 90       	pop	r5
     e54:	4f 90       	pop	r4
     e56:	08 95       	ret

00000e58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
     e58:	2f 92       	push	r2
     e5a:	3f 92       	push	r3
     e5c:	4f 92       	push	r4
     e5e:	5f 92       	push	r5
     e60:	6f 92       	push	r6
     e62:	7f 92       	push	r7
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	bf 92       	push	r11
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	60 97       	sbiw	r28, 0x10	; 16
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	8c 01       	movw	r16, r24
     e8e:	6b 01       	movw	r12, r22
    {
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
     e90:	db 01       	movw	r26, r22
     e92:	8d 90       	ld	r8, X+
     e94:	9d 90       	ld	r9, X+
     e96:	ad 90       	ld	r10, X+
     e98:	bc 90       	ld	r11, X
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
     e9a:	fc 01       	movw	r30, r24
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	a4 81       	ldd	r26, Z+4	; 0x04
     ea2:	b5 81       	ldd	r27, Z+5	; 0x05
     ea4:	88 15       	cp	r24, r8
     ea6:	99 05       	cpc	r25, r9
     ea8:	aa 05       	cpc	r26, r10
     eaa:	bb 05       	cpc	r27, r11
     eac:	70 f4       	brcc	.+28     	; 0xeca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x72>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
     eae:	b4 01       	movw	r22, r8
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	66 0f       	add	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	82 85       	ldd	r24, Z+10	; 0x0a
     eba:	93 85       	ldd	r25, Z+11	; 0x0b
     ebc:	0e 94 45 10 	call	0x208a	; 0x208a <realloc>
     ec0:	d8 01       	movw	r26, r16
     ec2:	1b 96       	adiw	r26, 0x0b	; 11
     ec4:	9c 93       	st	X, r25
     ec6:	8e 93       	st	-X, r24
     ec8:	1a 97       	sbiw	r26, 0x0a	; 10
      ints_length = ints_lengthT;
     eca:	f8 01       	movw	r30, r16
     ecc:	82 82       	std	Z+2, r8	; 0x02
     ece:	93 82       	std	Z+3, r9	; 0x03
     ed0:	a4 82       	std	Z+4, r10	; 0x04
     ed2:	b5 82       	std	Z+5, r11	; 0x05
     ed4:	96 01       	movw	r18, r12
      for( uint32_t i = 0; i < ints_length; i++){
     ed6:	81 2c       	mov	r8, r1
     ed8:	91 2c       	mov	r9, r1
     eda:	54 01       	movw	r10, r8
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
     edc:	44 e0       	ldi	r20, 0x04	; 4
     ede:	50 e0       	ldi	r21, 0x00	; 0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
     ee0:	b8 01       	movw	r22, r16
     ee2:	6a 5f       	subi	r22, 0xFA	; 250
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	2c 5f       	subi	r18, 0xFC	; 252
     ee8:	3f 4f       	sbci	r19, 0xFF	; 255
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
     eea:	f8 01       	movw	r30, r16
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	a4 81       	ldd	r26, Z+4	; 0x04
     ef2:	b5 81       	ldd	r27, Z+5	; 0x05
     ef4:	fa 01       	movw	r30, r20
     ef6:	34 96       	adiw	r30, 0x04	; 4
     ef8:	1f 01       	movw	r2, r30
     efa:	88 16       	cp	r8, r24
     efc:	99 06       	cpc	r9, r25
     efe:	aa 06       	cpc	r10, r26
     f00:	bb 06       	cpc	r11, r27
     f02:	50 f5       	brcc	.+84     	; 0xf58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x100>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
     f04:	d9 01       	movw	r26, r18
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	fc 90       	ld	r15, X
     f0a:	11 97       	sbiw	r26, 0x01	; 1
     f0c:	12 96       	adiw	r26, 0x02	; 2
     f0e:	8c 91       	ld	r24, X
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	dc 01       	movw	r26, r24
     f18:	99 27       	eor	r25, r25
     f1a:	88 27       	eor	r24, r24
     f1c:	9f 29       	or	r25, r15
     f1e:	f9 01       	movw	r30, r18
     f20:	f0 80       	ld	r15, Z
     f22:	8f 29       	or	r24, r15
     f24:	f3 80       	ldd	r15, Z+3	; 0x03
     f26:	bf 29       	or	r27, r15
     f28:	f8 01       	movw	r30, r16
     f2a:	86 83       	std	Z+6, r24	; 0x06
     f2c:	97 83       	std	Z+7, r25	; 0x07
     f2e:	a0 87       	std	Z+8, r26	; 0x08
     f30:	b1 87       	std	Z+9, r27	; 0x09
     f32:	da 01       	movw	r26, r20
     f34:	a1 01       	movw	r20, r2
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
     f36:	14 97       	sbiw	r26, 0x04	; 4
     f38:	82 85       	ldd	r24, Z+10	; 0x0a
     f3a:	93 85       	ldd	r25, Z+11	; 0x0b
     f3c:	a8 0f       	add	r26, r24
     f3e:	b9 1f       	adc	r27, r25
     f40:	84 e0       	ldi	r24, 0x04	; 4
     f42:	fb 01       	movw	r30, r22
     f44:	01 90       	ld	r0, Z+
     f46:	0d 92       	st	X+, r0
     f48:	8a 95       	dec	r24
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
      for( uint32_t i = 0; i < ints_length; i++){
     f4c:	ff ef       	ldi	r31, 0xFF	; 255
     f4e:	8f 1a       	sub	r8, r31
     f50:	9f 0a       	sbc	r9, r31
     f52:	af 0a       	sbc	r10, r31
     f54:	bf 0a       	sbc	r11, r31
     f56:	c7 cf       	rjmp	.-114    	; 0xee6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x8e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
     f58:	46 01       	movw	r8, r12
     f5a:	84 0e       	add	r8, r20
     f5c:	95 1e       	adc	r9, r21
     f5e:	d4 01       	movw	r26, r8
     f60:	8c 91       	ld	r24, X
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	9c 91       	ld	r25, X
     f66:	11 97       	sbiw	r26, 0x01	; 1
     f68:	12 96       	adiw	r26, 0x02	; 2
     f6a:	4c 90       	ld	r4, X
     f6c:	12 97       	sbiw	r26, 0x02	; 2
     f6e:	51 2c       	mov	r5, r1
     f70:	61 2c       	mov	r6, r1
     f72:	71 2c       	mov	r7, r1
     f74:	32 01       	movw	r6, r4
     f76:	55 24       	eor	r5, r5
     f78:	44 24       	eor	r4, r4
     f7a:	59 2a       	or	r5, r25
     f7c:	48 2a       	or	r4, r24
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
     f7e:	13 96       	adiw	r26, 0x03	; 3
     f80:	8c 91       	ld	r24, X
     f82:	78 2a       	or	r7, r24
      offset += sizeof(this->floats_length);
     f84:	5f 01       	movw	r10, r30
      if(floats_lengthT > floats_length)
     f86:	f8 01       	movw	r30, r16
     f88:	84 85       	ldd	r24, Z+12	; 0x0c
     f8a:	95 85       	ldd	r25, Z+13	; 0x0d
     f8c:	a6 85       	ldd	r26, Z+14	; 0x0e
     f8e:	b7 85       	ldd	r27, Z+15	; 0x0f
     f90:	84 15       	cp	r24, r4
     f92:	95 05       	cpc	r25, r5
     f94:	a6 05       	cpc	r26, r6
     f96:	b7 05       	cpc	r27, r7
     f98:	70 f4       	brcc	.+28     	; 0xfb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15e>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
     f9a:	b2 01       	movw	r22, r4
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	66 0f       	add	r22, r22
     fa2:	77 1f       	adc	r23, r23
     fa4:	84 89       	ldd	r24, Z+20	; 0x14
     fa6:	95 89       	ldd	r25, Z+21	; 0x15
     fa8:	0e 94 45 10 	call	0x208a	; 0x208a <realloc>
     fac:	d8 01       	movw	r26, r16
     fae:	55 96       	adiw	r26, 0x15	; 21
     fb0:	9c 93       	st	X, r25
     fb2:	8e 93       	st	-X, r24
     fb4:	54 97       	sbiw	r26, 0x14	; 20
      floats_length = floats_lengthT;
     fb6:	f8 01       	movw	r30, r16
     fb8:	44 86       	std	Z+12, r4	; 0x0c
     fba:	55 86       	std	Z+13, r5	; 0x0d
     fbc:	66 86       	std	Z+14, r6	; 0x0e
     fbe:	77 86       	std	Z+15, r7	; 0x0f
     fc0:	c4 01       	movw	r24, r8
      for( uint32_t i = 0; i < floats_length; i++){
     fc2:	41 2c       	mov	r4, r1
     fc4:	51 2c       	mov	r5, r1
     fc6:	32 01       	movw	r6, r4
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
     fc8:	98 01       	movw	r18, r16
     fca:	20 5f       	subi	r18, 0xF0	; 240
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
     fce:	d8 01       	movw	r26, r16
     fd0:	1c 96       	adiw	r26, 0x0c	; 12
     fd2:	4d 91       	ld	r20, X+
     fd4:	5d 91       	ld	r21, X+
     fd6:	6d 91       	ld	r22, X+
     fd8:	7c 91       	ld	r23, X
     fda:	1f 97       	sbiw	r26, 0x0f	; 15
     fdc:	f5 01       	movw	r30, r10
     fde:	34 96       	adiw	r30, 0x04	; 4
     fe0:	44 16       	cp	r4, r20
     fe2:	55 06       	cpc	r5, r21
     fe4:	66 06       	cpc	r6, r22
     fe6:	77 06       	cpc	r7, r23
     fe8:	98 f5       	brcc	.+102    	; 0x1050 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1f8>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
     fea:	dc 01       	movw	r26, r24
     fec:	15 96       	adiw	r26, 0x05	; 5
     fee:	fc 90       	ld	r15, X
     ff0:	15 97       	sbiw	r26, 0x05	; 5
     ff2:	16 96       	adiw	r26, 0x06	; 6
     ff4:	4c 91       	ld	r20, X
     ff6:	16 97       	sbiw	r26, 0x06	; 6
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	ba 01       	movw	r22, r20
    1000:	55 27       	eor	r21, r21
    1002:	44 27       	eor	r20, r20
    1004:	5f 29       	or	r21, r15
    1006:	14 96       	adiw	r26, 0x04	; 4
    1008:	fc 90       	ld	r15, X
    100a:	14 97       	sbiw	r26, 0x04	; 4
    100c:	4f 29       	or	r20, r15
    100e:	17 96       	adiw	r26, 0x07	; 7
    1010:	fc 90       	ld	r15, X
    1012:	7f 29       	or	r23, r15
      this->st_floats = u_st_floats.real;
    1014:	d8 01       	movw	r26, r16
    1016:	50 96       	adiw	r26, 0x10	; 16
    1018:	4d 93       	st	X+, r20
    101a:	5d 93       	st	X+, r21
    101c:	6d 93       	st	X+, r22
    101e:	7c 93       	st	X, r23
    1020:	53 97       	sbiw	r26, 0x13	; 19
    1022:	5f 01       	movw	r10, r30
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
    1024:	ac 01       	movw	r20, r24
    1026:	48 19       	sub	r20, r8
    1028:	59 09       	sbc	r21, r9
    102a:	54 96       	adiw	r26, 0x14	; 20
    102c:	0d 90       	ld	r0, X+
    102e:	bc 91       	ld	r27, X
    1030:	a0 2d       	mov	r26, r0
    1032:	a4 0f       	add	r26, r20
    1034:	b5 1f       	adc	r27, r21
    1036:	44 e0       	ldi	r20, 0x04	; 4
    1038:	f9 01       	movw	r30, r18
    103a:	01 90       	ld	r0, Z+
    103c:	0d 92       	st	X+, r0
    103e:	4a 95       	dec	r20
    1040:	e1 f7       	brne	.-8      	; 0x103a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1e2>
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->floats_length);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
      for( uint32_t i = 0; i < floats_length; i++){
    1042:	bf ef       	ldi	r27, 0xFF	; 255
    1044:	4b 1a       	sub	r4, r27
    1046:	5b 0a       	sbc	r5, r27
    1048:	6b 0a       	sbc	r6, r27
    104a:	7b 0a       	sbc	r7, r27
    104c:	04 96       	adiw	r24, 0x04	; 4
    104e:	bf cf       	rjmp	.-130    	; 0xfce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x176>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
    1050:	d6 01       	movw	r26, r12
    1052:	aa 0d       	add	r26, r10
    1054:	bb 1d       	adc	r27, r11
    1056:	8c 91       	ld	r24, X
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	9c 91       	ld	r25, X
    105c:	11 97       	sbiw	r26, 0x01	; 1
    105e:	12 96       	adiw	r26, 0x02	; 2
    1060:	8c 90       	ld	r8, X
    1062:	12 97       	sbiw	r26, 0x02	; 2
    1064:	91 2c       	mov	r9, r1
    1066:	a1 2c       	mov	r10, r1
    1068:	b1 2c       	mov	r11, r1
    106a:	54 01       	movw	r10, r8
    106c:	99 24       	eor	r9, r9
    106e:	88 24       	eor	r8, r8
    1070:	99 2a       	or	r9, r25
    1072:	88 2a       	or	r8, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
    1074:	13 96       	adiw	r26, 0x03	; 3
    1076:	8c 91       	ld	r24, X
    1078:	b8 2a       	or	r11, r24
      offset += sizeof(this->strings_length);
    107a:	7f 01       	movw	r14, r30
      if(strings_lengthT > strings_length)
    107c:	f8 01       	movw	r30, r16
    107e:	86 89       	ldd	r24, Z+22	; 0x16
    1080:	97 89       	ldd	r25, Z+23	; 0x17
    1082:	a0 8d       	ldd	r26, Z+24	; 0x18
    1084:	b1 8d       	ldd	r27, Z+25	; 0x19
    1086:	88 15       	cp	r24, r8
    1088:	99 05       	cpc	r25, r9
    108a:	aa 05       	cpc	r26, r10
    108c:	bb 05       	cpc	r27, r11
    108e:	60 f4       	brcc	.+24     	; 0x10a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
    1090:	b4 01       	movw	r22, r8
    1092:	66 0f       	add	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	84 8d       	ldd	r24, Z+28	; 0x1c
    1098:	95 8d       	ldd	r25, Z+29	; 0x1d
    109a:	0e 94 45 10 	call	0x208a	; 0x208a <realloc>
    109e:	d8 01       	movw	r26, r16
    10a0:	5d 96       	adiw	r26, 0x1d	; 29
    10a2:	9c 93       	st	X, r25
    10a4:	8e 93       	st	-X, r24
    10a6:	5c 97       	sbiw	r26, 0x1c	; 28
      strings_length = strings_lengthT;
    10a8:	f8 01       	movw	r30, r16
    10aa:	86 8a       	std	Z+22, r8	; 0x16
    10ac:	97 8a       	std	Z+23, r9	; 0x17
    10ae:	a0 8e       	std	Z+24, r10	; 0x18
    10b0:	b1 8e       	std	Z+25, r11	; 0x19
    10b2:	21 2c       	mov	r2, r1
    10b4:	31 2c       	mov	r3, r1
      for( uint32_t i = 0; i < strings_length; i++){
    10b6:	81 2c       	mov	r8, r1
    10b8:	91 2c       	mov	r9, r1
    10ba:	54 01       	movw	r10, r8
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    10bc:	98 01       	movw	r18, r16
    10be:	26 5e       	subi	r18, 0xE6	; 230
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	3a 87       	std	Y+10, r19	; 0x0a
    10c4:	29 87       	std	Y+9, r18	; 0x09
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    10c6:	f8 01       	movw	r30, r16
    10c8:	86 89       	ldd	r24, Z+22	; 0x16
    10ca:	97 89       	ldd	r25, Z+23	; 0x17
    10cc:	a0 8d       	ldd	r26, Z+24	; 0x18
    10ce:	b1 8d       	ldd	r27, Z+25	; 0x19
    10d0:	88 16       	cp	r8, r24
    10d2:	99 06       	cpc	r9, r25
    10d4:	aa 06       	cpc	r10, r26
    10d6:	bb 06       	cpc	r11, r27
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x284>
    10da:	5f c0       	rjmp	.+190    	; 0x119a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x342>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
    10dc:	b6 01       	movw	r22, r12
    10de:	6e 0d       	add	r22, r14
    10e0:	7f 1d       	adc	r23, r15
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
    10ea:	97 01       	movw	r18, r14
    10ec:	2c 5f       	subi	r18, 0xFC	; 252
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	38 8b       	std	Y+16, r19	; 0x10
    10f2:	2f 87       	std	Y+15, r18	; 0x0f
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    10f4:	49 81       	ldd	r20, Y+1	; 0x01
    10f6:	5a 81       	ldd	r21, Y+2	; 0x02
    10f8:	6b 81       	ldd	r22, Y+3	; 0x03
    10fa:	7c 81       	ldd	r23, Y+4	; 0x04
    10fc:	c9 01       	movw	r24, r18
    10fe:	33 0f       	add	r19, r19
    1100:	aa 0b       	sbc	r26, r26
    1102:	bb 0b       	sbc	r27, r27
    1104:	2c 01       	movw	r4, r24
    1106:	3d 01       	movw	r6, r26
    1108:	44 0e       	add	r4, r20
    110a:	55 1e       	adc	r5, r21
    110c:	66 1e       	adc	r6, r22
    110e:	77 1e       	adc	r7, r23
    1110:	4b 86       	std	Y+11, r4	; 0x0b
    1112:	5c 86       	std	Y+12, r5	; 0x0c
    1114:	6d 86       	std	Y+13, r6	; 0x0d
    1116:	7e 86       	std	Y+14, r7	; 0x0e
    1118:	23 e0       	ldi	r18, 0x03	; 3
    111a:	e2 0e       	add	r14, r18
    111c:	f1 1c       	adc	r15, r1
    111e:	f6 01       	movw	r30, r12
    1120:	ee 0d       	add	r30, r14
    1122:	ff 1d       	adc	r31, r15
    1124:	2f 85       	ldd	r18, Y+15	; 0x0f
    1126:	38 89       	ldd	r19, Y+16	; 0x10
    1128:	c9 01       	movw	r24, r18
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	4b 84       	ldd	r4, Y+11	; 0x0b
    1130:	5c 84       	ldd	r5, Y+12	; 0x0c
    1132:	6d 84       	ldd	r6, Y+13	; 0x0d
    1134:	7e 84       	ldd	r7, Y+14	; 0x0e
    1136:	84 15       	cp	r24, r4
    1138:	95 05       	cpc	r25, r5
    113a:	a6 05       	cpc	r26, r6
    113c:	b7 05       	cpc	r27, r7
    113e:	28 f4       	brcc	.+10     	; 0x114a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2f2>
          inbuffer[k-1]=inbuffer[k];
    1140:	a1 81       	ldd	r26, Z+1	; 0x01
    1142:	a1 93       	st	Z+, r26
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
    1144:	2f 5f       	subi	r18, 0xFF	; 255
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	ef cf       	rjmp	.-34     	; 0x1128 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d0>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
    114a:	6f 84       	ldd	r6, Y+15	; 0x0f
    114c:	78 88       	ldd	r7, Y+16	; 0x10
    114e:	46 0d       	add	r20, r6
    1150:	57 1d       	adc	r21, r7
    1152:	f6 01       	movw	r30, r12
    1154:	e4 0f       	add	r30, r20
    1156:	f5 1f       	adc	r31, r21
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	10 82       	st	Z, r1
      this->st_strings = (char *)(inbuffer + offset-1);
    115c:	c3 01       	movw	r24, r6
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	8c 0d       	add	r24, r12
    1162:	9d 1d       	adc	r25, r13
    1164:	d8 01       	movw	r26, r16
    1166:	5b 96       	adiw	r26, 0x1b	; 27
    1168:	9c 93       	st	X, r25
    116a:	8e 93       	st	-X, r24
    116c:	5a 97       	sbiw	r26, 0x1a	; 26
      offset += length_st_strings;
    116e:	7a 01       	movw	r14, r20
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
    1170:	5c 96       	adiw	r26, 0x1c	; 28
    1172:	ed 91       	ld	r30, X+
    1174:	fc 91       	ld	r31, X
    1176:	5d 97       	sbiw	r26, 0x1d	; 29
    1178:	e2 0d       	add	r30, r2
    117a:	f3 1d       	adc	r31, r3
    117c:	a9 85       	ldd	r26, Y+9	; 0x09
    117e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1180:	8d 91       	ld	r24, X+
    1182:	9c 91       	ld	r25, X
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
      offset += sizeof(this->strings_length);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
      for( uint32_t i = 0; i < strings_length; i++){
    1188:	bf ef       	ldi	r27, 0xFF	; 255
    118a:	8b 1a       	sub	r8, r27
    118c:	9b 0a       	sbc	r9, r27
    118e:	ab 0a       	sbc	r10, r27
    1190:	bb 0a       	sbc	r11, r27
    1192:	e2 e0       	ldi	r30, 0x02	; 2
    1194:	2e 0e       	add	r2, r30
    1196:	31 1c       	adc	r3, r1
    1198:	96 cf       	rjmp	.-212    	; 0x10c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
    119a:	c7 01       	movw	r24, r14
    119c:	60 96       	adiw	r28, 0x10	; 16
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	bf 90       	pop	r11
    11ba:	af 90       	pop	r10
    11bc:	9f 90       	pop	r9
    11be:	8f 90       	pop	r8
    11c0:	7f 90       	pop	r7
    11c2:	6f 90       	pop	r6
    11c4:	5f 90       	pop	r5
    11c6:	4f 90       	pop	r4
    11c8:	3f 90       	pop	r3
    11ca:	2f 90       	pop	r2
    11cc:	08 95       	ret

000011ce <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
    11ce:	4f 92       	push	r4
    11d0:	5f 92       	push	r5
    11d2:	6f 92       	push	r6
    11d4:	7f 92       	push	r7
    11d6:	8f 92       	push	r8
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <_ZN8std_msgs6String11deserializeEPh+0x1e>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <_ZN8std_msgs6String11deserializeEPh+0x20>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	7c 01       	movw	r14, r24
    11f4:	8b 01       	movw	r16, r22
    {
      int offset = 0;
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
    11f6:	ce 01       	movw	r24, r28
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	ab 81       	ldd	r26, Y+3	; 0x03
    1204:	bc 81       	ldd	r27, Y+4	; 0x04
    1206:	4c 01       	movw	r8, r24
    1208:	5d 01       	movw	r10, r26
    120a:	24 e0       	ldi	r18, 0x04	; 4
    120c:	82 0e       	add	r8, r18
    120e:	91 1c       	adc	r9, r1
    1210:	a1 1c       	adc	r10, r1
    1212:	b1 1c       	adc	r11, r1
    1214:	a8 01       	movw	r20, r16
    1216:	4d 5f       	subi	r20, 0xFD	; 253
    1218:	5f 4f       	sbci	r21, 0xFF	; 255
    121a:	fa 01       	movw	r30, r20
    121c:	24 e0       	ldi	r18, 0x04	; 4
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	29 01       	movw	r4, r18
    1222:	61 2c       	mov	r6, r1
    1224:	71 2c       	mov	r7, r1
    1226:	48 14       	cp	r4, r8
    1228:	59 04       	cpc	r5, r9
    122a:	6a 04       	cpc	r6, r10
    122c:	7b 04       	cpc	r7, r11
    122e:	28 f4       	brcc	.+10     	; 0x123a <_ZN8std_msgs6String11deserializeEPh+0x6c>
          inbuffer[k-1]=inbuffer[k];
    1230:	61 81       	ldd	r22, Z+1	; 0x01
    1232:	61 93       	st	Z+, r22
    {
      int offset = 0;
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
    1234:	2f 5f       	subi	r18, 0xFF	; 255
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	f3 cf       	rjmp	.-26     	; 0x1220 <_ZN8std_msgs6String11deserializeEPh+0x52>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_data-1]=0;
    123a:	f8 01       	movw	r30, r16
    123c:	e8 0f       	add	r30, r24
    123e:	f9 1f       	adc	r31, r25
    1240:	13 82       	std	Z+3, r1	; 0x03
      this->data = (char *)(inbuffer + offset-1);
    1242:	f7 01       	movw	r30, r14
    1244:	53 83       	std	Z+3, r21	; 0x03
    1246:	42 83       	std	Z+2, r20	; 0x02
      offset += length_data;
     return offset;
    }
    1248:	04 96       	adiw	r24, 0x04	; 4
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	9f 90       	pop	r9
    1264:	8f 90       	pop	r8
    1266:	7f 90       	pop	r7
    1268:	6f 90       	pop	r6
    126a:	5f 90       	pop	r5
    126c:	4f 90       	pop	r4
    126e:	08 95       	ret

00001270 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	2a 97       	sbiw	r28, 0x0a	; 10
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	8c 01       	movw	r16, r24
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
      data()
    128a:	83 ec       	ldi	r24, 0xC3	; 195
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
    1292:	1b 82       	std	Y+3, r1	; 0x03
    1294:	1c 82       	std	Y+4, r1	; 0x04
    1296:	1d 82       	std	Y+5, r1	; 0x05
    1298:	1e 82       	std	Y+6, r1	; 0x06
    129a:	1f 82       	std	Y+7, r1	; 0x07
    129c:	18 86       	std	Y+8, r1	; 0x08
    129e:	19 86       	std	Y+9, r1	; 0x09
    12a0:	1a 86       	std	Y+10, r1	; 0x0a
  {
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    12a2:	d8 01       	movw	r26, r16
    12a4:	ed 91       	ld	r30, X+
    12a6:	fc 91       	ld	r31, X
    12a8:	01 90       	ld	r0, Z+
    12aa:	f0 81       	ld	r31, Z
    12ac:	e0 2d       	mov	r30, r0
    12ae:	ae 01       	movw	r20, r28
    12b0:	4f 5f       	subi	r20, 0xFF	; 255
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	6a e0       	ldi	r22, 0x0A	; 10
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	c8 01       	movw	r24, r16
    12ba:	09 95       	icall


    // Returns milliseconds since start of program
    unsigned long time()
    {
      return avr_time_now();
    12bc:	0e 94 b0 00 	call	0x160	; 0x160 <avr_time_now>
    rt_time = hardware_.time();
    12c0:	f8 01       	movw	r30, r16
    12c2:	63 83       	std	Z+3, r22	; 0x03
    12c4:	74 83       	std	Z+4, r23	; 0x04
    12c6:	85 83       	std	Z+5, r24	; 0x05
    12c8:	96 83       	std	Z+6, r25	; 0x06
  }
    12ca:	2a 96       	adiw	r28, 0x0a	; 10
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
    12e0:	4f 92       	push	r4
    12e2:	5f 92       	push	r5
    12e4:	6f 92       	push	r6
    12e6:	7f 92       	push	r7
    12e8:	af 92       	push	r10
    12ea:	bf 92       	push	r11
    12ec:	cf 92       	push	r12
    12ee:	df 92       	push	r13
    12f0:	ef 92       	push	r14
    12f2:	ff 92       	push	r15
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	2e 97       	sbiw	r28, 0x0e	; 14
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	8c 01       	movw	r16, r24
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
    130e:	8f ec       	ldi	r24, 0xCF	; 207
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	1c 82       	std	Y+4, r1	; 0x04
    1318:	1b 82       	std	Y+3, r1	; 0x03
    131a:	86 eb       	ldi	r24, 0xB6	; 182
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	98 87       	std	Y+8, r25	; 0x08
    1324:	8f 83       	std	Y+7, r24	; 0x07
    1326:	9a 87       	std	Y+10, r25	; 0x0a
    1328:	89 87       	std	Y+9, r24	; 0x09
    132a:	1b 86       	std	Y+11, r1	; 0x0b
    132c:	1c 86       	std	Y+12, r1	; 0x0c
    132e:	1d 86       	std	Y+13, r1	; 0x0d
    1330:	1e 86       	std	Y+14, r1	; 0x0e
    1332:	68 01       	movw	r12, r16
    1334:	8d ee       	ldi	r24, 0xED	; 237
    1336:	c8 1a       	sub	r12, r24
    1338:	8b ef       	ldi	r24, 0xFB	; 251
    133a:	d8 0a       	sbc	r13, r24
    133c:	78 01       	movw	r14, r16
    133e:	ab eb       	ldi	r26, 0xBB	; 187
    1340:	ea 1a       	sub	r14, r26
    1342:	ab ef       	ldi	r26, 0xFB	; 251
    1344:	fa 0a       	sbc	r15, r26
      {
        ti.topic_id = publishers[i]->id_;
        ti.topic_name = (char *) publishers[i]->topic_;
        ti.message_type = (char *) publishers[i]->msg_->getType();
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
        ti.buffer_size = OUTPUT_SIZE;
    1346:	41 2c       	mov	r4, r1
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	59 2e       	mov	r5, r25
    134c:	61 2c       	mov	r6, r1
    134e:	71 2c       	mov	r7, r1
  {
    rosserial_msgs::TopicInfo ti;
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
    {
      if (publishers[i] != 0) // non-empty slot
    1350:	d6 01       	movw	r26, r12
    1352:	ed 91       	ld	r30, X+
    1354:	fc 91       	ld	r31, X
    1356:	30 97       	sbiw	r30, 0x00	; 0
    1358:	a9 f1       	breq	.+106    	; 0x13c4 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      {
        ti.topic_id = publishers[i]->id_;
    135a:	84 81       	ldd	r24, Z+4	; 0x04
    135c:	95 81       	ldd	r25, Z+5	; 0x05
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
        ti.topic_name = (char *) publishers[i]->topic_;
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
        ti.message_type = (char *) publishers[i]->msg_->getType();
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	dc 01       	movw	r26, r24
    1370:	ed 91       	ld	r30, X+
    1372:	fc 91       	ld	r31, X
    1374:	04 80       	ldd	r0, Z+4	; 0x04
    1376:	f5 81       	ldd	r31, Z+5	; 0x05
    1378:	e0 2d       	mov	r30, r0
    137a:	09 95       	icall
    137c:	98 87       	std	Y+8, r25	; 0x08
    137e:	8f 83       	std	Y+7, r24	; 0x07
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
    1380:	d6 01       	movw	r26, r12
    1382:	ed 91       	ld	r30, X+
    1384:	fc 91       	ld	r31, X
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	dc 01       	movw	r26, r24
    138c:	ed 91       	ld	r30, X+
    138e:	fc 91       	ld	r31, X
    1390:	06 80       	ldd	r0, Z+6	; 0x06
    1392:	f7 81       	ldd	r31, Z+7	; 0x07
    1394:	e0 2d       	mov	r30, r0
    1396:	09 95       	icall
    1398:	9a 87       	std	Y+10, r25	; 0x0a
    139a:	89 87       	std	Y+9, r24	; 0x09
        ti.buffer_size = OUTPUT_SIZE;
    139c:	4b 86       	std	Y+11, r4	; 0x0b
    139e:	5c 86       	std	Y+12, r5	; 0x0c
    13a0:	6d 86       	std	Y+13, r6	; 0x0d
    13a2:	7e 86       	std	Y+14, r7	; 0x0e
    13a4:	d6 01       	movw	r26, r12
    13a6:	ed 91       	ld	r30, X+
    13a8:	fc 91       	ld	r31, X
        publish(publishers[i]->getEndpointType(), &ti);
    13aa:	60 85       	ldd	r22, Z+8	; 0x08
    13ac:	71 85       	ldd	r23, Z+9	; 0x09
    13ae:	d8 01       	movw	r26, r16
    13b0:	ed 91       	ld	r30, X+
    13b2:	fc 91       	ld	r31, X
    13b4:	01 90       	ld	r0, Z+
    13b6:	f0 81       	ld	r31, Z
    13b8:	e0 2d       	mov	r30, r0
    13ba:	ae 01       	movw	r20, r28
    13bc:	4f 5f       	subi	r20, 0xFF	; 255
    13be:	5f 4f       	sbci	r21, 0xFF	; 255
    13c0:	c8 01       	movw	r24, r16
    13c2:	09 95       	icall
    13c4:	b2 e0       	ldi	r27, 0x02	; 2
    13c6:	cb 0e       	add	r12, r27
    13c8:	d1 1c       	adc	r13, r1

  void negotiateTopics()
  {
    rosserial_msgs::TopicInfo ti;
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
    13ca:	ce 14       	cp	r12, r14
    13cc:	df 04       	cpc	r13, r15
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xf2>
    13d0:	bf cf       	rjmp	.-130    	; 0x1350 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x70>
    13d2:	68 01       	movw	r12, r16
    13d4:	e9 e8       	ldi	r30, 0x89	; 137
    13d6:	ce 1a       	sub	r12, r30
    13d8:	eb ef       	ldi	r30, 0xFB	; 251
    13da:	de 0a       	sbc	r13, r30
      {
        ti.topic_id = subscribers[i]->id_;
        ti.topic_name = (char *) subscribers[i]->topic_;
        ti.message_type = (char *) subscribers[i]->getMsgType();
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
        ti.buffer_size = INPUT_SIZE;
    13dc:	41 2c       	mov	r4, r1
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	58 2e       	mov	r5, r24
    13e2:	61 2c       	mov	r6, r1
    13e4:	71 2c       	mov	r7, r1
        publish(publishers[i]->getEndpointType(), &ti);
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
    {
      if (subscribers[i] != 0) // non-empty slot
    13e6:	f7 01       	movw	r30, r14
    13e8:	a0 81       	ld	r26, Z
    13ea:	b1 81       	ldd	r27, Z+1	; 0x01
    13ec:	10 97       	sbiw	r26, 0x00	; 0
    13ee:	e1 f1       	breq	.+120    	; 0x1468 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x188>
      {
        ti.topic_id = subscribers[i]->id_;
    13f0:	12 96       	adiw	r26, 0x02	; 2
    13f2:	8d 91       	ld	r24, X+
    13f4:	9c 91       	ld	r25, X
    13f6:	13 97       	sbiw	r26, 0x03	; 3
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	8b 83       	std	Y+3, r24	; 0x03
        ti.topic_name = (char *) subscribers[i]->topic_;
    13fc:	14 96       	adiw	r26, 0x04	; 4
    13fe:	8d 91       	ld	r24, X+
    1400:	9c 91       	ld	r25, X
    1402:	15 97       	sbiw	r26, 0x05	; 5
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
        ti.message_type = (char *) subscribers[i]->getMsgType();
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	11 97       	sbiw	r26, 0x01	; 1
    140e:	04 80       	ldd	r0, Z+4	; 0x04
    1410:	f5 81       	ldd	r31, Z+5	; 0x05
    1412:	e0 2d       	mov	r30, r0
    1414:	cd 01       	movw	r24, r26
    1416:	09 95       	icall
    1418:	98 87       	std	Y+8, r25	; 0x08
    141a:	8f 83       	std	Y+7, r24	; 0x07
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
    141c:	d7 01       	movw	r26, r14
    141e:	8d 91       	ld	r24, X+
    1420:	9c 91       	ld	r25, X
    1422:	dc 01       	movw	r26, r24
    1424:	ed 91       	ld	r30, X+
    1426:	fc 91       	ld	r31, X
    1428:	06 80       	ldd	r0, Z+6	; 0x06
    142a:	f7 81       	ldd	r31, Z+7	; 0x07
    142c:	e0 2d       	mov	r30, r0
    142e:	09 95       	icall
    1430:	9a 87       	std	Y+10, r25	; 0x0a
    1432:	89 87       	std	Y+9, r24	; 0x09
        ti.buffer_size = INPUT_SIZE;
    1434:	4b 86       	std	Y+11, r4	; 0x0b
    1436:	5c 86       	std	Y+12, r5	; 0x0c
    1438:	6d 86       	std	Y+13, r6	; 0x0d
    143a:	7e 86       	std	Y+14, r7	; 0x0e
        publish(subscribers[i]->getEndpointType(), &ti);
    143c:	d8 01       	movw	r26, r16
    143e:	ed 91       	ld	r30, X+
    1440:	fc 91       	ld	r31, X
    1442:	a0 80       	ld	r10, Z
    1444:	b1 80       	ldd	r11, Z+1	; 0x01
    1446:	f7 01       	movw	r30, r14
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	dc 01       	movw	r26, r24
    144e:	ed 91       	ld	r30, X+
    1450:	fc 91       	ld	r31, X
    1452:	02 80       	ldd	r0, Z+2	; 0x02
    1454:	f3 81       	ldd	r31, Z+3	; 0x03
    1456:	e0 2d       	mov	r30, r0
    1458:	09 95       	icall
    145a:	ae 01       	movw	r20, r28
    145c:	4f 5f       	subi	r20, 0xFF	; 255
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	bc 01       	movw	r22, r24
    1462:	c8 01       	movw	r24, r16
    1464:	f5 01       	movw	r30, r10
    1466:	09 95       	icall
    1468:	f2 e0       	ldi	r31, 0x02	; 2
    146a:	ef 0e       	add	r14, r31
    146c:	f1 1c       	adc	r15, r1
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
        ti.buffer_size = OUTPUT_SIZE;
        publish(publishers[i]->getEndpointType(), &ti);
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
    146e:	ce 14       	cp	r12, r14
    1470:	df 04       	cpc	r13, r15
    1472:	09 f0       	breq	.+2      	; 0x1476 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x196>
    1474:	b8 cf       	rjmp	.-144    	; 0x13e6 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x106>
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
        ti.buffer_size = INPUT_SIZE;
        publish(subscribers[i]->getEndpointType(), &ti);
      }
    }
    configured_ = true;
    1476:	f8 01       	movw	r30, r16
    1478:	ef 57       	subi	r30, 0x7F	; 127
    147a:	fb 4f       	sbci	r31, 0xFB	; 251
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 83       	st	Z, r24
  }
    1480:	2e 96       	adiw	r28, 0x0e	; 14
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
    149c:	bf 90       	pop	r11
    149e:	af 90       	pop	r10
    14a0:	7f 90       	pop	r7
    14a2:	6f 90       	pop	r6
    14a4:	5f 90       	pop	r5
    14a6:	4f 90       	pop	r4
    14a8:	08 95       	ret

000014aa <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
    std_msgs::Time t;
    publish(TopicInfo::ID_TIME, &t);
    rt_time = hardware_.time();
  }

  void syncTime(uint8_t * data)
    14aa:	8f 92       	push	r8
    14ac:	9f 92       	push	r9
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	2a 97       	sbiw	r28, 0x0a	; 10
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	8c 01       	movw	r16, r24
    14d4:	5b 01       	movw	r10, r22
    14d6:	83 ec       	ldi	r24, 0xC3	; 195
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	1b 82       	std	Y+3, r1	; 0x03
    14e0:	1c 82       	std	Y+4, r1	; 0x04
    14e2:	1d 82       	std	Y+5, r1	; 0x05
    14e4:	1e 82       	std	Y+6, r1	; 0x06
    14e6:	1f 82       	std	Y+7, r1	; 0x07
    14e8:	18 86       	std	Y+8, r1	; 0x08
    14ea:	19 86       	std	Y+9, r1	; 0x09
    14ec:	1a 86       	std	Y+10, r1	; 0x0a
    14ee:	0e 94 b0 00 	call	0x160	; 0x160 <avr_time_now>
  {
    std_msgs::Time t;
    uint32_t offset = hardware_.time() - rt_time;
    14f2:	f8 01       	movw	r30, r16
    14f4:	c3 80       	ldd	r12, Z+3	; 0x03
    14f6:	d4 80       	ldd	r13, Z+4	; 0x04
    14f8:	e5 80       	ldd	r14, Z+5	; 0x05
    14fa:	f6 80       	ldd	r15, Z+6	; 0x06
    14fc:	9b 01       	movw	r18, r22
    14fe:	ac 01       	movw	r20, r24
    1500:	2c 19       	sub	r18, r12
    1502:	3d 09       	sbc	r19, r13
    1504:	4e 09       	sbc	r20, r14
    1506:	5f 09       	sbc	r21, r15
    1508:	69 01       	movw	r12, r18
    150a:	7a 01       	movw	r14, r20

    t.deserialize(data);
    150c:	b5 01       	movw	r22, r10
    150e:	ce 01       	movw	r24, r28
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
    1516:	88 ee       	ldi	r24, 0xE8	; 232
    1518:	88 2e       	mov	r8, r24
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	98 2e       	mov	r9, r24
    151e:	a1 2c       	mov	r10, r1
    1520:	b1 2c       	mov	r11, r1
    1522:	c7 01       	movw	r24, r14
    1524:	b6 01       	movw	r22, r12
    1526:	a5 01       	movw	r20, r10
    1528:	94 01       	movw	r18, r8
    152a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__udivmodsi4>
    152e:	cb 80       	ldd	r12, Y+3	; 0x03
    1530:	dc 80       	ldd	r13, Y+4	; 0x04
    1532:	ed 80       	ldd	r14, Y+5	; 0x05
    1534:	fe 80       	ldd	r15, Y+6	; 0x06
    1536:	c2 0e       	add	r12, r18
    1538:	d3 1e       	adc	r13, r19
    153a:	e4 1e       	adc	r14, r20
    153c:	f5 1e       	adc	r15, r21
    153e:	cb 82       	std	Y+3, r12	; 0x03
    1540:	dc 82       	std	Y+4, r13	; 0x04
    1542:	ed 82       	std	Y+5, r14	; 0x05
    1544:	fe 82       	std	Y+6, r15	; 0x06
    t.data.nsec += (offset % 1000) * 1000000UL;
    1546:	9b 01       	movw	r18, r22
    1548:	ac 01       	movw	r20, r24
    154a:	60 e4       	ldi	r22, 0x40	; 64
    154c:	72 e4       	ldi	r23, 0x42	; 66
    154e:	8f e0       	ldi	r24, 0x0F	; 15
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsi3>
    1556:	cf 80       	ldd	r12, Y+7	; 0x07
    1558:	d8 84       	ldd	r13, Y+8	; 0x08
    155a:	e9 84       	ldd	r14, Y+9	; 0x09
    155c:	fa 84       	ldd	r15, Y+10	; 0x0a
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	8c 0d       	add	r24, r12
    1564:	9d 1d       	adc	r25, r13
    1566:	ae 1d       	adc	r26, r14
    1568:	bf 1d       	adc	r27, r15
    156a:	8f 83       	std	Y+7, r24	; 0x07
    156c:	98 87       	std	Y+8, r25	; 0x08
    156e:	a9 87       	std	Y+9, r26	; 0x09
    1570:	ba 87       	std	Y+10, r27	; 0x0a
    1572:	0e 94 b0 00 	call	0x160	; 0x160 <avr_time_now>
  }

  void setNow(const Time & new_now)
  {
    uint32_t ms = hardware_.time();
    sec_offset = new_now.sec - ms / 1000 - 1;
    1576:	cb 80       	ldd	r12, Y+3	; 0x03
    1578:	dc 80       	ldd	r13, Y+4	; 0x04
    157a:	ed 80       	ldd	r14, Y+5	; 0x05
    157c:	fe 80       	ldd	r15, Y+6	; 0x06
    157e:	31 e0       	ldi	r19, 0x01	; 1
    1580:	c3 1a       	sub	r12, r19
    1582:	d1 08       	sbc	r13, r1
    1584:	e1 08       	sbc	r14, r1
    1586:	f1 08       	sbc	r15, r1
    1588:	a5 01       	movw	r20, r10
    158a:	94 01       	movw	r18, r8
    158c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__udivmodsi4>
    1590:	c2 1a       	sub	r12, r18
    1592:	d3 0a       	sbc	r13, r19
    1594:	e4 0a       	sbc	r14, r20
    1596:	f5 0a       	sbc	r15, r21
    1598:	f8 01       	movw	r30, r16
    159a:	c7 82       	std	Z+7, r12	; 0x07
    159c:	d0 86       	std	Z+8, r13	; 0x08
    159e:	e1 86       	std	Z+9, r14	; 0x09
    15a0:	f2 86       	std	Z+10, r15	; 0x0a
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
    15a2:	cf 80       	ldd	r12, Y+7	; 0x07
    15a4:	d8 84       	ldd	r13, Y+8	; 0x08
    15a6:	e9 84       	ldd	r14, Y+9	; 0x09
    15a8:	fa 84       	ldd	r15, Y+10	; 0x0a
    15aa:	f6 e3       	ldi	r31, 0x36	; 54
    15ac:	df 1a       	sub	r13, r31
    15ae:	f5 e6       	ldi	r31, 0x65	; 101
    15b0:	ef 0a       	sbc	r14, r31
    15b2:	f4 ec       	ldi	r31, 0xC4	; 196
    15b4:	ff 0a       	sbc	r15, r31
    15b6:	9b 01       	movw	r18, r22
    15b8:	ac 01       	movw	r20, r24
    15ba:	60 e4       	ldi	r22, 0x40	; 64
    15bc:	72 e4       	ldi	r23, 0x42	; 66
    15be:	8f e0       	ldi	r24, 0x0F	; 15
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsi3>
    15c6:	c6 1a       	sub	r12, r22
    15c8:	d7 0a       	sbc	r13, r23
    15ca:	e8 0a       	sbc	r14, r24
    15cc:	f9 0a       	sbc	r15, r25
    15ce:	f8 01       	movw	r30, r16
    15d0:	c3 86       	std	Z+11, r12	; 0x0b
    15d2:	d4 86       	std	Z+12, r13	; 0x0c
    15d4:	e5 86       	std	Z+13, r14	; 0x0d
    15d6:	f6 86       	std	Z+14, r15	; 0x0e
    normalizeSecNSec(sec_offset, nsec_offset);
    15d8:	b8 01       	movw	r22, r16
    15da:	65 5f       	subi	r22, 0xF5	; 245
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	c8 01       	movw	r24, r16
    15e0:	07 96       	adiw	r24, 0x07	; 7
    15e2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN3ros16normalizeSecNSecERmS0_>
    15e6:	0e 94 b0 00 	call	0x160	; 0x160 <avr_time_now>
    t.deserialize(data);
    t.data.sec += offset / 1000;
    t.data.nsec += (offset % 1000) * 1000000UL;

    this->setNow(t.data);
    last_sync_receive_time = hardware_.time();
    15ea:	f8 01       	movw	r30, r16
    15ec:	ea 57       	subi	r30, 0x7A	; 122
    15ee:	fb 4f       	sbci	r31, 0xFB	; 251
    15f0:	60 83       	st	Z, r22
    15f2:	71 83       	std	Z+1, r23	; 0x01
    15f4:	82 83       	std	Z+2, r24	; 0x02
    15f6:	93 83       	std	Z+3, r25	; 0x03
  }
    15f8:	2a 96       	adiw	r28, 0x0a	; 10
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	bf 90       	pop	r11
    1616:	af 90       	pop	r10
    1618:	9f 90       	pop	r9
    161a:	8f 90       	pop	r8
    161c:	08 95       	ret

0000161e <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
    161e:	2f 92       	push	r2
    1620:	3f 92       	push	r3
    1622:	4f 92       	push	r4
    1624:	5f 92       	push	r5
    1626:	6f 92       	push	r6
    1628:	7f 92       	push	r7
    162a:	8f 92       	push	r8
    162c:	9f 92       	push	r9
    162e:	af 92       	push	r10
    1630:	bf 92       	push	r11
    1632:	cf 92       	push	r12
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	62 97       	sbiw	r28, 0x12	; 18
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	9a 8b       	std	Y+18, r25	; 0x12
    1654:	89 8b       	std	Y+17, r24	; 0x11
    1656:	0e 94 b0 00 	call	0x160	; 0x160 <avr_time_now>
    165a:	4b 01       	movw	r8, r22
    165c:	5c 01       	movw	r10, r24
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
    165e:	29 89       	ldd	r18, Y+17	; 0x11
    1660:	3a 89       	ldd	r19, Y+18	; 0x12
    1662:	2a 57       	subi	r18, 0x7A	; 122
    1664:	3b 4f       	sbci	r19, 0xFB	; 251
    1666:	3c 83       	std	Y+4, r19	; 0x04
    1668:	2b 83       	std	Y+3, r18	; 0x03
    166a:	f9 01       	movw	r30, r18
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	a2 81       	ldd	r26, Z+2	; 0x02
    1672:	b3 81       	ldd	r27, Z+3	; 0x03
    1674:	a5 01       	movw	r20, r10
    1676:	94 01       	movw	r18, r8
    1678:	28 1b       	sub	r18, r24
    167a:	39 0b       	sbc	r19, r25
    167c:	4a 0b       	sbc	r20, r26
    167e:	5b 0b       	sbc	r21, r27
    1680:	da 01       	movw	r26, r20
    1682:	c9 01       	movw	r24, r18
    1684:	89 3f       	cpi	r24, 0xF9	; 249
    1686:	9a 42       	sbci	r25, 0x2A	; 42
    1688:	a1 05       	cpc	r26, r1
    168a:	b1 05       	cpc	r27, r1
    168c:	28 f0       	brcs	.+10     	; 0x1698 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7a>
    {
      configured_ = false;
    168e:	e9 89       	ldd	r30, Y+17	; 0x11
    1690:	fa 89       	ldd	r31, Y+18	; 0x12
    1692:	ef 57       	subi	r30, 0x7F	; 127
    1694:	fb 4f       	sbci	r31, 0xFB	; 251
    1696:	10 82       	st	Z, r1
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
    1698:	09 89       	ldd	r16, Y+17	; 0x11
    169a:	1a 89       	ldd	r17, Y+18	; 0x12
    169c:	09 58       	subi	r16, 0x89	; 137
    169e:	1b 4f       	sbci	r17, 0xFB	; 251
    16a0:	d8 01       	movw	r26, r16
    16a2:	8d 91       	ld	r24, X+
    16a4:	9c 91       	ld	r25, X
    16a6:	89 2b       	or	r24, r25
    16a8:	81 f0       	breq	.+32     	; 0x16ca <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xac>
    {
      if (c_time > last_msg_timeout_time)
    16aa:	e9 89       	ldd	r30, Y+17	; 0x11
    16ac:	fa 89       	ldd	r31, Y+18	; 0x12
    16ae:	e6 57       	subi	r30, 0x76	; 118
    16b0:	fb 4f       	sbci	r31, 0xFB	; 251
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	a2 81       	ldd	r26, Z+2	; 0x02
    16b8:	b3 81       	ldd	r27, Z+3	; 0x03
    16ba:	88 15       	cp	r24, r8
    16bc:	99 05       	cpc	r25, r9
    16be:	aa 05       	cpc	r26, r10
    16c0:	bb 05       	cpc	r27, r11
    16c2:	18 f4       	brcc	.+6      	; 0x16ca <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xac>
      {
        mode_ = MODE_FIRST_FF;
    16c4:	f8 01       	movw	r30, r16
    16c6:	11 82       	std	Z+1, r1	; 0x01
    16c8:	10 82       	st	Z, r1
            last_sync_receive_time = c_time;
            return SPIN_ERR;
          }
          else if (topic_ == TopicInfo::ID_TIME)
          {
            saw_time_msg = true;
    16ca:	1a 82       	std	Y+2, r1	; 0x02
    16cc:	19 82       	std	Y+1, r1	; 0x01
        }
      }
      int data = hardware_.read();
      if (data < 0)
        break;
      checksum_ += data;
    16ce:	69 88       	ldd	r6, Y+17	; 0x11
    16d0:	7a 88       	ldd	r7, Y+18	; 0x12
    16d2:	f1 e8       	ldi	r31, 0x81	; 129
    16d4:	6f 1a       	sub	r6, r31
    16d6:	fb ef       	ldi	r31, 0xFB	; 251
    16d8:	7f 0a       	sbc	r7, r31
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
      {
        mode_ = MODE_FIRST_FF;
        if ((checksum_ % 256) == 255)
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
    16da:	c9 88       	ldd	r12, Y+17	; 0x11
    16dc:	da 88       	ldd	r13, Y+18	; 0x12
    16de:	25 e8       	ldi	r18, 0x85	; 133
    16e0:	c2 1a       	sub	r12, r18
    16e2:	2b ef       	ldi	r18, 0xFB	; 251
    16e4:	d2 0a       	sbc	r13, r18
            tx_stop_requested = true;
          }
          else
          {
            if (subscribers[topic_ - 100])
              subscribers[topic_ - 100]->callback(message_in);
    16e6:	49 88       	ldd	r4, Y+17	; 0x11
    16e8:	5a 88       	ldd	r5, Y+18	; 0x12
    16ea:	33 e1       	ldi	r19, 0x13	; 19
    16ec:	43 0e       	add	r4, r19
    16ee:	51 1c       	adc	r5, r1
            req_param_resp.deserialize(message_in);
            param_received = true;
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
          {
            configured_ = false;
    16f0:	49 89       	ldd	r20, Y+17	; 0x11
    16f2:	5a 89       	ldd	r21, Y+18	; 0x12
    16f4:	4f 57       	subi	r20, 0x7F	; 127
    16f6:	5b 4f       	sbci	r21, 0xFB	; 251
    16f8:	5e 83       	std	Y+6, r21	; 0x06
    16fa:	4d 83       	std	Y+5, r20	; 0x05
            saw_time_msg = true;
            syncTime(message_in);
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
          {
            req_param_resp.deserialize(message_in);
    16fc:	89 89       	ldd	r24, Y+17	; 0x11
    16fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1700:	81 57       	subi	r24, 0x71	; 113
    1702:	9b 4f       	sbci	r25, 0xFB	; 251
    1704:	98 87       	std	Y+8, r25	; 0x08
    1706:	8f 83       	std	Y+7, r24	; 0x07
            param_received = true;
    1708:	a9 89       	ldd	r26, Y+17	; 0x11
    170a:	ba 89       	ldd	r27, Y+18	; 0x12
    170c:	a2 57       	subi	r26, 0x72	; 114
    170e:	bb 4f       	sbci	r27, 0xFB	; 251
    1710:	ba 87       	std	Y+10, r27	; 0x0a
    1712:	a9 87       	std	Y+9, r26	; 0x09
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
      {
        topic_ += data << 8;
        mode_ = MODE_MESSAGE;
        if (bytes_ == 0)
    1714:	e9 88       	ldd	r14, Y+17	; 0x11
    1716:	fa 88       	ldd	r15, Y+18	; 0x12
    1718:	b7 e8       	ldi	r27, 0x87	; 135
    171a:	eb 1a       	sub	r14, r27
    171c:	bb ef       	ldi	r27, 0xFB	; 251
    171e:	fb 0a       	sbc	r15, r27
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
      {
        bytes_ = data;
        index_ = 0;
    1720:	29 88       	ldd	r2, Y+17	; 0x11
    1722:	3a 88       	ldd	r3, Y+18	; 0x12
    1724:	e3 e8       	ldi	r30, 0x83	; 131
    1726:	2e 1a       	sub	r2, r30
    1728:	eb ef       	ldi	r30, 0xFB	; 251
    172a:	3e 0a       	sbc	r3, r30
      else if (mode_ == MODE_FIRST_FF)
      {
        if (data == 0xff)
        {
          mode_++;
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
    172c:	29 89       	ldd	r18, Y+17	; 0x11
    172e:	3a 89       	ldd	r19, Y+18	; 0x12
    1730:	26 57       	subi	r18, 0x76	; 118
    1732:	3b 4f       	sbci	r19, 0xFB	; 251
    1734:	3c 87       	std	Y+12, r19	; 0x0c
    1736:	2b 87       	std	Y+11, r18	; 0x0b
    1738:	d5 01       	movw	r26, r10
    173a:	c4 01       	movw	r24, r8
    173c:	44 96       	adiw	r24, 0x14	; 20
    173e:	a1 1d       	adc	r26, r1
    1740:	b1 1d       	adc	r27, r1
    1742:	8d 87       	std	Y+13, r24	; 0x0d
    1744:	9e 87       	std	Y+14, r25	; 0x0e
    1746:	af 87       	std	Y+15, r26	; 0x0f
    1748:	b8 8b       	std	Y+16, r27	; 0x10

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
    174a:	e9 89       	ldd	r30, Y+17	; 0x11
    174c:	fa 89       	ldd	r31, Y+18	; 0x12
    174e:	87 85       	ldd	r24, Z+15	; 0x0f
    1750:	90 89       	ldd	r25, Z+16	; 0x10
    1752:	a1 89       	ldd	r26, Z+17	; 0x11
    1754:	b2 89       	ldd	r27, Z+18	; 0x12
    1756:	89 2b       	or	r24, r25
    1758:	8a 2b       	or	r24, r26
    175a:	8b 2b       	or	r24, r27
    175c:	31 f4       	brne	.+12     	; 0x176a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x14c>

    // Read a byte of data from ROS connection.
    // If no data, returns -1
    int read()
    {
      return avr_uart_receive_byte();
    175e:	0e 94 cb 00 	call	0x196	; 0x196 <avr_uart_receive_byte>
    1762:	9c 01       	movw	r18, r24
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
        }
      }
      int data = hardware_.read();
      if (data < 0)
    1764:	97 ff       	sbrs	r25, 7
    1766:	15 c0       	rjmp	.+42     	; 0x1792 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x174>
    1768:	49 c1       	rjmp	.+658    	; 0x19fc <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3de>


    // Returns milliseconds since start of program
    unsigned long time()
    {
      return avr_time_now();
    176a:	0e 94 b0 00 	call	0x160	; 0x160 <avr_time_now>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	88 19       	sub	r24, r8
    1774:	99 09       	sbc	r25, r9
    1776:	aa 09       	sbc	r26, r10
    1778:	bb 09       	sbc	r27, r11
    177a:	e9 89       	ldd	r30, Y+17	; 0x11
    177c:	fa 89       	ldd	r31, Y+18	; 0x12
    177e:	27 85       	ldd	r18, Z+15	; 0x0f
    1780:	30 89       	ldd	r19, Z+16	; 0x10
    1782:	41 89       	ldd	r20, Z+17	; 0x11
    1784:	52 89       	ldd	r21, Z+18	; 0x12
    1786:	28 17       	cp	r18, r24
    1788:	39 07       	cpc	r19, r25
    178a:	4a 07       	cpc	r20, r26
    178c:	5b 07       	cpc	r21, r27
    178e:	38 f7       	brcc	.-50     	; 0x175e <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x140>
    1790:	65 c1       	rjmp	.+714    	; 0x1a5c <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x43e>
        }
      }
      int data = hardware_.read();
      if (data < 0)
        break;
      checksum_ += data;
    1792:	d3 01       	movw	r26, r6
    1794:	8d 91       	ld	r24, X+
    1796:	9c 91       	ld	r25, X
    1798:	11 97       	sbiw	r26, 0x01	; 1
    179a:	82 0f       	add	r24, r18
    179c:	93 1f       	adc	r25, r19
    179e:	8d 93       	st	X+, r24
    17a0:	9c 93       	st	X, r25
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
    17a2:	f8 01       	movw	r30, r16
    17a4:	40 81       	ld	r20, Z
    17a6:	51 81       	ldd	r21, Z+1	; 0x01
    17a8:	47 30       	cpi	r20, 0x07	; 7
    17aa:	51 05       	cpc	r21, r1
    17ac:	e9 f4       	brne	.+58     	; 0x17e8 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ca>
      {
        message_in[index_++] = data;
    17ae:	d1 01       	movw	r26, r2
    17b0:	8d 91       	ld	r24, X+
    17b2:	9c 91       	ld	r25, X
    17b4:	11 97       	sbiw	r26, 0x01	; 1
    17b6:	ac 01       	movw	r20, r24
    17b8:	4f 5f       	subi	r20, 0xFF	; 255
    17ba:	5f 4f       	sbci	r21, 0xFF	; 255
    17bc:	4d 93       	st	X+, r20
    17be:	5c 93       	st	X, r21
    17c0:	e9 89       	ldd	r30, Y+17	; 0x11
    17c2:	fa 89       	ldd	r31, Y+18	; 0x12
    17c4:	e8 0f       	add	r30, r24
    17c6:	f9 1f       	adc	r31, r25
    17c8:	23 8b       	std	Z+19, r18	; 0x13
        bytes_--;
    17ca:	f7 01       	movw	r30, r14
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	80 83       	st	Z, r24
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
    17d6:	89 2b       	or	r24, r25
    17d8:	09 f0       	breq	.+2      	; 0x17dc <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
    17da:	b7 cf       	rjmp	.-146    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
          mode_ = MODE_MSG_CHECKSUM;
    17dc:	e8 e0       	ldi	r30, 0x08	; 8
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	d8 01       	movw	r26, r16
    17e2:	ed 93       	st	X+, r30
    17e4:	fc 93       	st	X, r31
    17e6:	b1 cf       	rjmp	.-158    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_FIRST_FF)
    17e8:	41 15       	cp	r20, r1
    17ea:	51 05       	cpc	r21, r1
    17ec:	41 f5       	brne	.+80     	; 0x183e <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
      {
        if (data == 0xff)
    17ee:	2f 3f       	cpi	r18, 0xFF	; 255
    17f0:	31 05       	cpc	r19, r1
    17f2:	81 f4       	brne	.+32     	; 0x1814 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f6>
        {
          mode_++;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	80 83       	st	Z, r24
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
    17fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    17fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1800:	4f 85       	ldd	r20, Y+15	; 0x0f
    1802:	58 89       	ldd	r21, Y+16	; 0x10
    1804:	ab 85       	ldd	r26, Y+11	; 0x0b
    1806:	bc 85       	ldd	r27, Y+12	; 0x0c
    1808:	2d 93       	st	X+, r18
    180a:	3d 93       	st	X+, r19
    180c:	4d 93       	st	X+, r20
    180e:	5c 93       	st	X, r21
    1810:	13 97       	sbiw	r26, 0x03	; 3
    1812:	9b cf       	rjmp	.-202    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
    1814:	0e 94 b0 00 	call	0x160	; 0x160 <avr_time_now>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	88 19       	sub	r24, r8
    181e:	99 09       	sbc	r25, r9
    1820:	aa 09       	sbc	r26, r10
    1822:	bb 09       	sbc	r27, r11
    1824:	89 38       	cpi	r24, 0x89	; 137
    1826:	93 41       	sbci	r25, 0x13	; 19
    1828:	a1 05       	cpc	r26, r1
    182a:	b1 05       	cpc	r27, r1
    182c:	08 f4       	brcc	.+2      	; 0x1830 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x212>
    182e:	8d cf       	rjmp	.-230    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
    1830:	29 89       	ldd	r18, Y+17	; 0x11
    1832:	3a 89       	ldd	r19, Y+18	; 0x12
    1834:	2f 57       	subi	r18, 0x7F	; 127
    1836:	3b 4f       	sbci	r19, 0xFB	; 251
    1838:	d9 01       	movw	r26, r18
    183a:	1c 92       	st	X, r1
    183c:	0f c1       	rjmp	.+542    	; 0x1a5c <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x43e>
          return SPIN_TIMEOUT;
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
    183e:	41 30       	cpi	r20, 0x01	; 1
    1840:	51 05       	cpc	r21, r1
    1842:	91 f4       	brne	.+36     	; 0x1868 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
      {
        if (data == PROTOCOL_VER)
    1844:	2e 3f       	cpi	r18, 0xFE	; 254
    1846:	31 05       	cpc	r19, r1
    1848:	19 f4       	brne	.+6      	; 0x1850 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x232>
        {
          mode_++;
    184a:	82 e0       	ldi	r24, 0x02	; 2
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	2b c0       	rjmp	.+86     	; 0x18a6 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x288>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
    1850:	11 82       	std	Z+1, r1	; 0x01
    1852:	10 82       	st	Z, r1
          if (configured_ == false)
    1854:	ed 81       	ldd	r30, Y+5	; 0x05
    1856:	fe 81       	ldd	r31, Y+6	; 0x06
    1858:	80 81       	ld	r24, Z
    185a:	81 11       	cpse	r24, r1
    185c:	76 cf       	rjmp	.-276    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
            requestSyncTime();  /* send a msg back showing our protocol version */
    185e:	89 89       	ldd	r24, Y+17	; 0x11
    1860:	9a 89       	ldd	r25, Y+18	; 0x12
    1862:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
    1866:	71 cf       	rjmp	.-286    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
    1868:	42 30       	cpi	r20, 0x02	; 2
    186a:	51 05       	cpc	r21, r1
    186c:	69 f4       	brne	.+26     	; 0x1888 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x26a>
      {
        bytes_ = data;
    186e:	d7 01       	movw	r26, r14
    1870:	2d 93       	st	X+, r18
    1872:	3c 93       	st	X, r19
        index_ = 0;
    1874:	f1 01       	movw	r30, r2
    1876:	11 82       	std	Z+1, r1	; 0x01
    1878:	10 82       	st	Z, r1
        mode_++;
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	d8 01       	movw	r26, r16
    1880:	8d 93       	st	X+, r24
    1882:	9c 93       	st	X, r25
        checksum_ = data;               /* first byte for calculating size checksum */
    1884:	f3 01       	movw	r30, r6
    1886:	4f c0       	rjmp	.+158    	; 0x1926 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x308>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
    1888:	43 30       	cpi	r20, 0x03	; 3
    188a:	51 05       	cpc	r21, r1
    188c:	81 f4       	brne	.+32     	; 0x18ae <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x290>
      {
        bytes_ += data << 8;
    188e:	32 2f       	mov	r19, r18
    1890:	22 27       	eor	r18, r18
    1892:	d7 01       	movw	r26, r14
    1894:	8d 91       	ld	r24, X+
    1896:	9c 91       	ld	r25, X
    1898:	11 97       	sbiw	r26, 0x01	; 1
    189a:	28 0f       	add	r18, r24
    189c:	39 1f       	adc	r19, r25
    189e:	2d 93       	st	X+, r18
    18a0:	3c 93       	st	X, r19
        mode_++;
    18a2:	84 e0       	ldi	r24, 0x04	; 4
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	f8 01       	movw	r30, r16
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	4e cf       	rjmp	.-356    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
    18ae:	44 30       	cpi	r20, 0x04	; 4
    18b0:	51 05       	cpc	r21, r1
    18b2:	81 f4       	brne	.+32     	; 0x18d4 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b6>
      {
        if ((checksum_ % 256) == 255)
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	71 e0       	ldi	r23, 0x01	; 1
    18b8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__divmodhi4>
    18bc:	8f 3f       	cpi	r24, 0xFF	; 255
    18be:	91 05       	cpc	r25, r1
    18c0:	29 f4       	brne	.+10     	; 0x18cc <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ae>
          mode_++;
    18c2:	85 e0       	ldi	r24, 0x05	; 5
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	3f cf       	rjmp	.-386    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
    18cc:	f8 01       	movw	r30, r16
    18ce:	11 82       	std	Z+1, r1	; 0x01
    18d0:	10 82       	st	Z, r1
    18d2:	3b cf       	rjmp	.-394    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
    18d4:	45 30       	cpi	r20, 0x05	; 5
    18d6:	51 05       	cpc	r21, r1
    18d8:	61 f4       	brne	.+24     	; 0x18f2 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
      {
        topic_ = data;
    18da:	d6 01       	movw	r26, r12
    18dc:	2d 93       	st	X+, r18
    18de:	3c 93       	st	X, r19
        mode_++;
    18e0:	86 e0       	ldi	r24, 0x06	; 6
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	f8 01       	movw	r30, r16
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	80 83       	st	Z, r24
        checksum_ = data;               /* first byte included in checksum */
    18ea:	d3 01       	movw	r26, r6
    18ec:	2d 93       	st	X+, r18
    18ee:	3c 93       	st	X, r19
    18f0:	2c cf       	rjmp	.-424    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
    18f2:	46 30       	cpi	r20, 0x06	; 6
    18f4:	51 05       	cpc	r21, r1
    18f6:	d1 f4       	brne	.+52     	; 0x192c <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30e>
      {
        topic_ += data << 8;
    18f8:	32 2f       	mov	r19, r18
    18fa:	22 27       	eor	r18, r18
    18fc:	f6 01       	movw	r30, r12
    18fe:	80 81       	ld	r24, Z
    1900:	91 81       	ldd	r25, Z+1	; 0x01
    1902:	28 0f       	add	r18, r24
    1904:	39 1f       	adc	r19, r25
    1906:	31 83       	std	Z+1, r19	; 0x01
    1908:	20 83       	st	Z, r18
        mode_ = MODE_MESSAGE;
    190a:	e7 e0       	ldi	r30, 0x07	; 7
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	d8 01       	movw	r26, r16
    1910:	ed 93       	st	X+, r30
    1912:	fc 93       	st	X, r31
        if (bytes_ == 0)
    1914:	d7 01       	movw	r26, r14
    1916:	8d 91       	ld	r24, X+
    1918:	9c 91       	ld	r25, X
    191a:	89 2b       	or	r24, r25
    191c:	09 f0       	breq	.+2      	; 0x1920 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x302>
    191e:	15 cf       	rjmp	.-470    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
          mode_ = MODE_MSG_CHECKSUM;
    1920:	28 e0       	ldi	r18, 0x08	; 8
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	f8 01       	movw	r30, r16
    1926:	31 83       	std	Z+1, r19	; 0x01
    1928:	20 83       	st	Z, r18
    192a:	0f cf       	rjmp	.-482    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
    192c:	48 30       	cpi	r20, 0x08	; 8
    192e:	51 05       	cpc	r21, r1
    1930:	09 f0       	breq	.+2      	; 0x1934 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
    1932:	0b cf       	rjmp	.-490    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
      {
        mode_ = MODE_FIRST_FF;
    1934:	11 82       	std	Z+1, r1	; 0x01
    1936:	10 82       	st	Z, r1
        if ((checksum_ % 256) == 255)
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	71 e0       	ldi	r23, 0x01	; 1
    193c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__divmodhi4>
    1940:	8f 3f       	cpi	r24, 0xFF	; 255
    1942:	91 05       	cpc	r25, r1
    1944:	09 f0       	breq	.+2      	; 0x1948 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
    1946:	01 cf       	rjmp	.-510    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
    1948:	f6 01       	movw	r30, r12
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	d9 f4       	brne	.+54     	; 0x1988 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36a>
          {
            requestSyncTime();
    1952:	89 89       	ldd	r24, Y+17	; 0x11
    1954:	9a 89       	ldd	r25, Y+18	; 0x12
    1956:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
    195a:	89 89       	ldd	r24, Y+17	; 0x11
    195c:	9a 89       	ldd	r25, Y+18	; 0x12
    195e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
    1962:	29 89       	ldd	r18, Y+17	; 0x11
    1964:	3a 89       	ldd	r19, Y+18	; 0x12
    1966:	2e 57       	subi	r18, 0x7E	; 126
    1968:	3b 4f       	sbci	r19, 0xFB	; 251
    196a:	d9 01       	movw	r26, r18
    196c:	8d 92       	st	X+, r8
    196e:	9d 92       	st	X+, r9
    1970:	ad 92       	st	X+, r10
    1972:	bc 92       	st	X, r11
    1974:	13 97       	sbiw	r26, 0x03	; 3
            last_sync_receive_time = c_time;
    1976:	eb 81       	ldd	r30, Y+3	; 0x03
    1978:	fc 81       	ldd	r31, Y+4	; 0x04
    197a:	80 82       	st	Z, r8
    197c:	91 82       	std	Z+1, r9	; 0x01
    197e:	a2 82       	std	Z+2, r10	; 0x02
    1980:	b3 82       	std	Z+3, r11	; 0x03
            return SPIN_ERR;
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	9f ef       	ldi	r25, 0xFF	; 255
    1986:	72 c0       	rjmp	.+228    	; 0x1a6c <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44e>
          }
          else if (topic_ == TopicInfo::ID_TIME)
    1988:	8a 30       	cpi	r24, 0x0A	; 10
    198a:	91 05       	cpc	r25, r1
    198c:	41 f4       	brne	.+16     	; 0x199e <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>
          {
            saw_time_msg = true;
            syncTime(message_in);
    198e:	b2 01       	movw	r22, r4
    1990:	89 89       	ldd	r24, Y+17	; 0x11
    1992:	9a 89       	ldd	r25, Y+18	; 0x12
    1994:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
            last_sync_receive_time = c_time;
            return SPIN_ERR;
          }
          else if (topic_ == TopicInfo::ID_TIME)
          {
            saw_time_msg = true;
    1998:	f1 e0       	ldi	r31, 0x01	; 1
    199a:	fa 83       	std	Y+2, r31	; 0x02
    199c:	d6 ce       	rjmp	.-596    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
            syncTime(message_in);
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
    199e:	86 30       	cpi	r24, 0x06	; 6
    19a0:	91 05       	cpc	r25, r1
    19a2:	51 f4       	brne	.+20     	; 0x19b8 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39a>
          {
            req_param_resp.deserialize(message_in);
    19a4:	b2 01       	movw	r22, r4
    19a6:	8f 81       	ldd	r24, Y+7	; 0x07
    19a8:	98 85       	ldd	r25, Y+8	; 0x08
    19aa:	0e 94 2c 07 	call	0xe58	; 0xe58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	a9 85       	ldd	r26, Y+9	; 0x09
    19b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    19b4:	8c 93       	st	X, r24
    19b6:	c9 ce       	rjmp	.-622    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
    19b8:	8b 30       	cpi	r24, 0x0B	; 11
    19ba:	91 05       	cpc	r25, r1
    19bc:	31 f4       	brne	.+12     	; 0x19ca <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ac>
          {
            configured_ = false;
    19be:	ed 81       	ldd	r30, Y+5	; 0x05
    19c0:	fe 81       	ldd	r31, Y+6	; 0x06
    19c2:	10 82       	st	Z, r1
            tx_stop_requested = true;
    19c4:	f1 e0       	ldi	r31, 0x01	; 1
    19c6:	f9 83       	std	Y+1, r31	; 0x01
    19c8:	c0 ce       	rjmp	.-640    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
          }
          else
          {
            if (subscribers[topic_ - 100])
    19ca:	fc 01       	movw	r30, r24
    19cc:	e4 56       	subi	r30, 0x64	; 100
    19ce:	f1 09       	sbc	r31, r1
    19d0:	ee 0f       	add	r30, r30
    19d2:	ff 1f       	adc	r31, r31
    19d4:	29 89       	ldd	r18, Y+17	; 0x11
    19d6:	3a 89       	ldd	r19, Y+18	; 0x12
    19d8:	e2 0f       	add	r30, r18
    19da:	f3 1f       	adc	r31, r19
    19dc:	eb 5b       	subi	r30, 0xBB	; 187
    19de:	fb 4f       	sbci	r31, 0xFB	; 251
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	09 f4       	brne	.+2      	; 0x19ea <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3cc>
    19e8:	b0 ce       	rjmp	.-672    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
              subscribers[topic_ - 100]->callback(message_in);
    19ea:	dc 01       	movw	r26, r24
    19ec:	ed 91       	ld	r30, X+
    19ee:	fc 91       	ld	r31, X
    19f0:	01 90       	ld	r0, Z+
    19f2:	f0 81       	ld	r31, Z
    19f4:	e0 2d       	mov	r30, r0
    19f6:	b2 01       	movw	r22, r4
    19f8:	09 95       	icall
    19fa:	a7 ce       	rjmp	.-690    	; 0x174a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x12c>
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
    19fc:	e9 89       	ldd	r30, Y+17	; 0x11
    19fe:	fa 89       	ldd	r31, Y+18	; 0x12
    1a00:	ef 57       	subi	r30, 0x7F	; 127
    1a02:	fb 4f       	sbci	r31, 0xFB	; 251
    1a04:	80 81       	ld	r24, Z
    1a06:	88 23       	and	r24, r24
    1a08:	01 f1       	breq	.+64     	; 0x1a4a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x42c>
    1a0a:	09 89       	ldd	r16, Y+17	; 0x11
    1a0c:	1a 89       	ldd	r17, Y+18	; 0x12
    1a0e:	0e 57       	subi	r16, 0x7E	; 126
    1a10:	1b 4f       	sbci	r17, 0xFB	; 251
    1a12:	f8 01       	movw	r30, r16
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	a2 81       	ldd	r26, Z+2	; 0x02
    1a1a:	b3 81       	ldd	r27, Z+3	; 0x03
    1a1c:	a5 01       	movw	r20, r10
    1a1e:	94 01       	movw	r18, r8
    1a20:	28 1b       	sub	r18, r24
    1a22:	39 0b       	sbc	r19, r25
    1a24:	4a 0b       	sbc	r20, r26
    1a26:	5b 0b       	sbc	r21, r27
    1a28:	da 01       	movw	r26, r20
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	85 3c       	cpi	r24, 0xC5	; 197
    1a2e:	99 40       	sbci	r25, 0x09	; 9
    1a30:	a1 05       	cpc	r26, r1
    1a32:	b1 05       	cpc	r27, r1
    1a34:	50 f0       	brcs	.+20     	; 0x1a4a <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x42c>
    {
      requestSyncTime();
    1a36:	89 89       	ldd	r24, Y+17	; 0x11
    1a38:	9a 89       	ldd	r25, Y+18	; 0x12
    1a3a:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
    1a3e:	d8 01       	movw	r26, r16
    1a40:	8d 92       	st	X+, r8
    1a42:	9d 92       	st	X+, r9
    1a44:	ad 92       	st	X+, r10
    1a46:	bc 92       	st	X, r11
    1a48:	13 97       	sbiw	r26, 0x03	; 3
    }

    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
    1a4a:	ba 81       	ldd	r27, Y+2	; 0x02
    1a4c:	b1 11       	cpse	r27, r1
    1a4e:	09 c0       	rjmp	.+18     	; 0x1a62 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x444>
    1a50:	e9 81       	ldd	r30, Y+1	; 0x01
    1a52:	e1 11       	cpse	r30, r1
    1a54:	09 c0       	rjmp	.+18     	; 0x1a68 <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44a>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	08 c0       	rjmp	.+16     	; 0x1a6c <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44e>
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
    1a5c:	8e ef       	ldi	r24, 0xFE	; 254
    1a5e:	9f ef       	ldi	r25, 0xFF	; 255
    1a60:	05 c0       	rjmp	.+10     	; 0x1a6c <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44e>
    {
      requestSyncTime();
      last_sync_time = c_time;
    }

    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
    1a62:	8c ef       	ldi	r24, 0xFC	; 252
    1a64:	9f ef       	ldi	r25, 0xFF	; 255
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44e>
    1a68:	8d ef       	ldi	r24, 0xFD	; 253
    1a6a:	9f ef       	ldi	r25, 0xFF	; 255
  }
    1a6c:	62 96       	adiw	r28, 0x12	; 18
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	ff 90       	pop	r15
    1a82:	ef 90       	pop	r14
    1a84:	df 90       	pop	r13
    1a86:	cf 90       	pop	r12
    1a88:	bf 90       	pop	r11
    1a8a:	af 90       	pop	r10
    1a8c:	9f 90       	pop	r9
    1a8e:	8f 90       	pop	r8
    1a90:	7f 90       	pop	r7
    1a92:	6f 90       	pop	r6
    1a94:	5f 90       	pop	r5
    1a96:	4f 90       	pop	r4
    1a98:	3f 90       	pop	r3
    1a9a:	2f 90       	pop	r2
    1a9c:	08 95       	ret

00001a9e <main>:
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	a8 95       	wdr
    1aa4:	81 b5       	in	r24, 0x21	; 33
    1aa6:	88 61       	ori	r24, 0x18	; 24
    1aa8:	81 bd       	out	0x21, r24	; 33
    1aaa:	11 bc       	out	0x21, r1	; 33
    1aac:	0f be       	out	0x3f, r0	; 63

    // Initialize the AVR
    void init()
    {
      wdt_disable();
      avr_time_init();
    1aae:	0e 94 a9 00 	call	0x152	; 0x152 <avr_time_init>
      avr_uart_init();
    1ab2:	0e 94 bb 00 	call	0x176	; 0x176 <avr_uart_init>
      sei();
    1ab6:	78 94       	sei

  /* Start serial, initialize buffers */
  void initNode()
  {
    hardware_.init();
    mode_ = 0;
    1ab8:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <nh+0x478>
    1abc:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <nh+0x477>
    bytes_ = 0;
    1ac0:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <nh+0x47a>
    1ac4:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <nh+0x479>
    index_ = 0;
    1ac8:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <nh+0x47e>
    1acc:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <nh+0x47d>
    topic_ = 0;
    1ad0:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <nh+0x47c>
    1ad4:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <nh+0x47b>
    1ad8:	ef e2       	ldi	r30, 0x2F	; 47
    1ada:	f6 e0       	ldi	r31, 0x06	; 6
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    {
      if (publishers[i] == 0) // empty slot
    1ae0:	21 91       	ld	r18, Z+
    1ae2:	31 91       	ld	r19, Z+
    1ae4:	23 2b       	or	r18, r19
    1ae6:	d9 f4       	brne	.+54     	; 0x1b1e <main+0x80>
      {
        publishers[i] = &p;
    1ae8:	fc 01       	movw	r30, r24
    1aea:	ee 0f       	add	r30, r30
    1aec:	ff 1f       	adc	r31, r31
    1aee:	e1 5d       	subi	r30, 0xD1	; 209
    1af0:	f9 4f       	sbci	r31, 0xF9	; 249
    1af2:	2e e0       	ldi	r18, 0x0E	; 14
    1af4:	32 e0       	ldi	r19, 0x02	; 2
    1af6:	31 83       	std	Z+1, r19	; 0x01
    1af8:	20 83       	st	Z, r18
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
    1afa:	83 58       	subi	r24, 0x83	; 131
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <chatter+0x5>
    1b02:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <chatter+0x4>
        p.nh_ = this;
    1b06:	8c e1       	ldi	r24, 0x1C	; 28
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <chatter+0x7>
    1b0e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <chatter+0x6>
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    1b12:	c1 2c       	mov	r12, r1
    1b14:	d1 2c       	mov	r13, r1
    1b16:	76 01       	movw	r14, r12
  while(1)
  {
    // Send the message every second
    if(avr_time_now() - lasttime > 1000)
    {
      str_msg.data = hello;
    1b18:	c0 e6       	ldi	r28, 0x60	; 96
    1b1a:	d0 e0       	ldi	r29, 0x00	; 0
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <main+0x92>
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	89 31       	cpi	r24, 0x19	; 25
    1b22:	91 05       	cpc	r25, r1
    1b24:	e9 f6       	brne	.-70     	; 0x1ae0 <main+0x42>
    1b26:	f5 cf       	rjmp	.-22     	; 0x1b12 <main+0x74>
      chatter.publish(&str_msg);
      lasttime = avr_time_now();
    }
    nh.spinOnce();
    1b28:	8c e1       	ldi	r24, 0x1C	; 28
    1b2a:	92 e0       	ldi	r25, 0x02	; 2
    1b2c:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN3ros11NodeHandle_I17Atmega32AHardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  nh.advertise(chatter);

  while(1)
  {
    // Send the message every second
    if(avr_time_now() - lasttime > 1000)
    1b30:	0e 94 b0 00 	call	0x160	; 0x160 <avr_time_now>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8c 19       	sub	r24, r12
    1b3a:	9d 09       	sbc	r25, r13
    1b3c:	ae 09       	sbc	r26, r14
    1b3e:	bf 09       	sbc	r27, r15
    1b40:	89 3e       	cpi	r24, 0xE9	; 233
    1b42:	93 40       	sbci	r25, 0x03	; 3
    1b44:	a1 05       	cpc	r26, r1
    1b46:	b1 05       	cpc	r27, r1
    1b48:	78 f3       	brcs	.-34     	; 0x1b28 <main+0x8a>
    {
      str_msg.data = hello;
    1b4a:	d0 93 1b 02 	sts	0x021B, r29	; 0x80021b <str_msg+0x3>
    1b4e:	c0 93 1a 02 	sts	0x021A, r28	; 0x80021a <str_msg+0x2>
    msg_(msg),
    endpoint_(endpoint) {};

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
    1b52:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <chatter+0x6>
    1b56:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <chatter+0x7>
    1b5a:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <chatter+0x4>
    1b5e:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <chatter+0x5>
    1b62:	dc 01       	movw	r26, r24
    1b64:	ed 91       	ld	r30, X+
    1b66:	fc 91       	ld	r31, X
    1b68:	01 90       	ld	r0, Z+
    1b6a:	f0 81       	ld	r31, Z
    1b6c:	e0 2d       	mov	r30, r0
    1b6e:	48 e1       	ldi	r20, 0x18	; 24
    1b70:	52 e0       	ldi	r21, 0x02	; 2
    1b72:	09 95       	icall
      chatter.publish(&str_msg);
      lasttime = avr_time_now();
    1b74:	0e 94 b0 00 	call	0x160	; 0x160 <avr_time_now>
    1b78:	6b 01       	movw	r12, r22
    1b7a:	7c 01       	movw	r14, r24
    1b7c:	d5 cf       	rjmp	.-86     	; 0x1b28 <main+0x8a>

00001b7e <_GLOBAL__sub_I___cxa_pure_virtual>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
    1b7e:	ec e1       	ldi	r30, 0x1C	; 28
    1b80:	f2 e0       	ldi	r31, 0x02	; 2
    1b82:	8f ef       	ldi	r24, 0xFF	; 255
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	13 82       	std	Z+3, r1	; 0x03
    1b8c:	14 82       	std	Z+4, r1	; 0x04
    1b8e:	15 82       	std	Z+5, r1	; 0x05
    1b90:	16 82       	std	Z+6, r1	; 0x06
    1b92:	17 82       	std	Z+7, r1	; 0x07
    1b94:	10 86       	std	Z+8, r1	; 0x08
    1b96:	11 86       	std	Z+9, r1	; 0x09
    1b98:	12 86       	std	Z+10, r1	; 0x0a
    1b9a:	13 86       	std	Z+11, r1	; 0x0b
    1b9c:	14 86       	std	Z+12, r1	; 0x0c
    1b9e:	15 86       	std	Z+13, r1	; 0x0d
    1ba0:	16 86       	std	Z+14, r1	; 0x0e
    1ba2:	17 86       	std	Z+15, r1	; 0x0f
    1ba4:	10 8a       	std	Z+16, r1	; 0x10
    1ba6:	11 8a       	std	Z+17, r1	; 0x11
    1ba8:	12 8a       	std	Z+18, r1	; 0x12
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	92 e0       	ldi	r25, 0x02	; 2
    1bae:	ef e2       	ldi	r30, 0x2F	; 47
    1bb0:	f2 e0       	ldi	r31, 0x02	; 2
    1bb2:	df 01       	movw	r26, r30
    1bb4:	9c 01       	movw	r18, r24
    1bb6:	1d 92       	st	X+, r1
    1bb8:	21 50       	subi	r18, 0x01	; 1
    1bba:	30 40       	sbci	r19, 0x00	; 0
    1bbc:	e1 f7       	brne	.-8      	; 0x1bb6 <_GLOBAL__sub_I___cxa_pure_virtual+0x38>
    1bbe:	ef e2       	ldi	r30, 0x2F	; 47
    1bc0:	f4 e0       	ldi	r31, 0x04	; 4
    1bc2:	df 01       	movw	r26, r30
    1bc4:	9c 01       	movw	r18, r24
    1bc6:	1d 92       	st	X+, r1
    1bc8:	21 50       	subi	r18, 0x01	; 1
    1bca:	30 40       	sbci	r19, 0x00	; 0
    1bcc:	e1 f7       	brne	.-8      	; 0x1bc6 <_GLOBAL__sub_I___cxa_pure_virtual+0x48>
    1bce:	82 e3       	ldi	r24, 0x32	; 50
    1bd0:	ef e2       	ldi	r30, 0x2F	; 47
    1bd2:	f6 e0       	ldi	r31, 0x06	; 6
    1bd4:	df 01       	movw	r26, r30
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	1d 92       	st	X+, r1
    1bda:	2a 95       	dec	r18
    1bdc:	e9 f7       	brne	.-6      	; 0x1bd8 <_GLOBAL__sub_I___cxa_pure_virtual+0x5a>
    1bde:	e1 e6       	ldi	r30, 0x61	; 97
    1be0:	f6 e0       	ldi	r31, 0x06	; 6
    1be2:	df 01       	movw	r26, r30
    1be4:	1d 92       	st	X+, r1
    1be6:	8a 95       	dec	r24
    1be8:	e9 f7       	brne	.-6      	; 0x1be4 <_GLOBAL__sub_I___cxa_pure_virtual+0x66>
    1bea:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <nh+0x478>
    1bee:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <nh+0x477>
    1bf2:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <nh+0x47a>
    1bf6:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <nh+0x479>
    1bfa:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <nh+0x47c>
    1bfe:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <nh+0x47b>
    1c02:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <nh+0x47e>
    1c06:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <nh+0x47d>
    1c0a:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <nh+0x480>
    1c0e:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <nh+0x47f>
    1c12:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <nh+0x481>
    1c16:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <nh+0x482>
    1c1a:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <nh+0x483>
    1c1e:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <nh+0x484>
    1c22:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <nh+0x485>
    1c26:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <nh+0x486>
    1c2a:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <nh+0x487>
    1c2e:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <nh+0x488>
    1c32:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <nh+0x489>
    1c36:	10 92 a6 06 	sts	0x06A6, r1	; 0x8006a6 <nh+0x48a>
    1c3a:	10 92 a7 06 	sts	0x06A7, r1	; 0x8006a7 <nh+0x48b>
    1c3e:	10 92 a8 06 	sts	0x06A8, r1	; 0x8006a8 <nh+0x48c>
    1c42:	10 92 a9 06 	sts	0x06A9, r1	; 0x8006a9 <nh+0x48d>
    1c46:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <nh+0x48e>
      _strings_type * strings;

    RequestParamResponse():
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
    1c4a:	87 ee       	ldi	r24, 0xE7	; 231
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	90 93 ac 06 	sts	0x06AC, r25	; 0x8006ac <nh+0x490>
    1c52:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <nh+0x48f>
    1c56:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <nh+0x491>
    1c5a:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <nh+0x492>
    1c5e:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <nh+0x493>
    1c62:	10 92 b0 06 	sts	0x06B0, r1	; 0x8006b0 <nh+0x494>
    1c66:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <nh+0x495>
    1c6a:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <nh+0x496>
    1c6e:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <nh+0x497>
    1c72:	10 92 b4 06 	sts	0x06B4, r1	; 0x8006b4 <nh+0x498>
    1c76:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <nh+0x49a>
    1c7a:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <nh+0x499>
    1c7e:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <nh+0x49b>
    1c82:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <nh+0x49c>
    1c86:	10 92 b9 06 	sts	0x06B9, r1	; 0x8006b9 <nh+0x49d>
    1c8a:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <nh+0x49e>
    1c8e:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <nh+0x49f>
    1c92:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <nh+0x4a0>
    1c96:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <nh+0x4a1>
    1c9a:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <nh+0x4a2>
    1c9e:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <nh+0x4a4>
    1ca2:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <nh+0x4a3>
    1ca6:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <nh+0x4a5>
    1caa:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <nh+0x4a6>
    1cae:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <nh+0x4a7>
    1cb2:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <nh+0x4a8>
    1cb6:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <nh+0x4aa>
    1cba:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <nh+0x4a9>
    1cbe:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <nh+0x4ac>
    1cc2:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <nh+0x4ab>
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
      data("")
    1cc6:	a8 e1       	ldi	r26, 0x18	; 24
    1cc8:	b2 e0       	ldi	r27, 0x02	; 2
    1cca:	83 ef       	ldi	r24, 0xF3	; 243
    1ccc:	91 e0       	ldi	r25, 0x01	; 1
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	9c 93       	st	X, r25
    1cd2:	8e 93       	st	-X, r24
    1cd4:	86 eb       	ldi	r24, 0xB6	; 182
    1cd6:	91 e0       	ldi	r25, 0x01	; 1
    1cd8:	13 96       	adiw	r26, 0x03	; 3
    1cda:	9c 93       	st	X, r25
    1cdc:	8e 93       	st	-X, r24
    1cde:	12 97       	sbiw	r26, 0x02	; 2
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
    1ce0:	ee e0       	ldi	r30, 0x0E	; 14
    1ce2:	f2 e0       	ldi	r31, 0x02	; 2
    1ce4:	87 eb       	ldi	r24, 0xB7	; 183
    1ce6:	91 e0       	ldi	r25, 0x01	; 1
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
    1cec:	b3 83       	std	Z+3, r27	; 0x03
    1cee:	a2 83       	std	Z+2, r26	; 0x02
    1cf0:	11 86       	std	Z+9, r1	; 0x09
    1cf2:	10 86       	std	Z+8, r1	; 0x08
    1cf4:	08 95       	ret

00001cf6 <__fixsfsi>:
    1cf6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__fixunssfsi>
    1cfa:	68 94       	set
    1cfc:	b1 11       	cpse	r27, r1
    1cfe:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__fp_szero>
    1d02:	08 95       	ret

00001d04 <__fixunssfsi>:
    1d04:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__fp_splitA>
    1d08:	88 f0       	brcs	.+34     	; 0x1d2c <__fixunssfsi+0x28>
    1d0a:	9f 57       	subi	r25, 0x7F	; 127
    1d0c:	98 f0       	brcs	.+38     	; 0x1d34 <__fixunssfsi+0x30>
    1d0e:	b9 2f       	mov	r27, r25
    1d10:	99 27       	eor	r25, r25
    1d12:	b7 51       	subi	r27, 0x17	; 23
    1d14:	b0 f0       	brcs	.+44     	; 0x1d42 <__fixunssfsi+0x3e>
    1d16:	e1 f0       	breq	.+56     	; 0x1d50 <__fixunssfsi+0x4c>
    1d18:	66 0f       	add	r22, r22
    1d1a:	77 1f       	adc	r23, r23
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	1a f0       	brmi	.+6      	; 0x1d28 <__fixunssfsi+0x24>
    1d22:	ba 95       	dec	r27
    1d24:	c9 f7       	brne	.-14     	; 0x1d18 <__fixunssfsi+0x14>
    1d26:	14 c0       	rjmp	.+40     	; 0x1d50 <__fixunssfsi+0x4c>
    1d28:	b1 30       	cpi	r27, 0x01	; 1
    1d2a:	91 f0       	breq	.+36     	; 0x1d50 <__fixunssfsi+0x4c>
    1d2c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__fp_zero>
    1d30:	b1 e0       	ldi	r27, 0x01	; 1
    1d32:	08 95       	ret
    1d34:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__fp_zero>
    1d38:	67 2f       	mov	r22, r23
    1d3a:	78 2f       	mov	r23, r24
    1d3c:	88 27       	eor	r24, r24
    1d3e:	b8 5f       	subi	r27, 0xF8	; 248
    1d40:	39 f0       	breq	.+14     	; 0x1d50 <__fixunssfsi+0x4c>
    1d42:	b9 3f       	cpi	r27, 0xF9	; 249
    1d44:	cc f3       	brlt	.-14     	; 0x1d38 <__fixunssfsi+0x34>
    1d46:	86 95       	lsr	r24
    1d48:	77 95       	ror	r23
    1d4a:	67 95       	ror	r22
    1d4c:	b3 95       	inc	r27
    1d4e:	d9 f7       	brne	.-10     	; 0x1d46 <__fixunssfsi+0x42>
    1d50:	3e f4       	brtc	.+14     	; 0x1d60 <__fixunssfsi+0x5c>
    1d52:	90 95       	com	r25
    1d54:	80 95       	com	r24
    1d56:	70 95       	com	r23
    1d58:	61 95       	neg	r22
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	08 95       	ret

00001d62 <__floatunsisf>:
    1d62:	e8 94       	clt
    1d64:	09 c0       	rjmp	.+18     	; 0x1d78 <__floatsisf+0x12>

00001d66 <__floatsisf>:
    1d66:	97 fb       	bst	r25, 7
    1d68:	3e f4       	brtc	.+14     	; 0x1d78 <__floatsisf+0x12>
    1d6a:	90 95       	com	r25
    1d6c:	80 95       	com	r24
    1d6e:	70 95       	com	r23
    1d70:	61 95       	neg	r22
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	99 23       	and	r25, r25
    1d7a:	a9 f0       	breq	.+42     	; 0x1da6 <__floatsisf+0x40>
    1d7c:	f9 2f       	mov	r31, r25
    1d7e:	96 e9       	ldi	r25, 0x96	; 150
    1d80:	bb 27       	eor	r27, r27
    1d82:	93 95       	inc	r25
    1d84:	f6 95       	lsr	r31
    1d86:	87 95       	ror	r24
    1d88:	77 95       	ror	r23
    1d8a:	67 95       	ror	r22
    1d8c:	b7 95       	ror	r27
    1d8e:	f1 11       	cpse	r31, r1
    1d90:	f8 cf       	rjmp	.-16     	; 0x1d82 <__floatsisf+0x1c>
    1d92:	fa f4       	brpl	.+62     	; 0x1dd2 <__floatsisf+0x6c>
    1d94:	bb 0f       	add	r27, r27
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <__floatsisf+0x36>
    1d98:	60 ff       	sbrs	r22, 0
    1d9a:	1b c0       	rjmp	.+54     	; 0x1dd2 <__floatsisf+0x6c>
    1d9c:	6f 5f       	subi	r22, 0xFF	; 255
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	8f 4f       	sbci	r24, 0xFF	; 255
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	16 c0       	rjmp	.+44     	; 0x1dd2 <__floatsisf+0x6c>
    1da6:	88 23       	and	r24, r24
    1da8:	11 f0       	breq	.+4      	; 0x1dae <__floatsisf+0x48>
    1daa:	96 e9       	ldi	r25, 0x96	; 150
    1dac:	11 c0       	rjmp	.+34     	; 0x1dd0 <__floatsisf+0x6a>
    1dae:	77 23       	and	r23, r23
    1db0:	21 f0       	breq	.+8      	; 0x1dba <__floatsisf+0x54>
    1db2:	9e e8       	ldi	r25, 0x8E	; 142
    1db4:	87 2f       	mov	r24, r23
    1db6:	76 2f       	mov	r23, r22
    1db8:	05 c0       	rjmp	.+10     	; 0x1dc4 <__floatsisf+0x5e>
    1dba:	66 23       	and	r22, r22
    1dbc:	71 f0       	breq	.+28     	; 0x1dda <__floatsisf+0x74>
    1dbe:	96 e8       	ldi	r25, 0x86	; 134
    1dc0:	86 2f       	mov	r24, r22
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	2a f0       	brmi	.+10     	; 0x1dd2 <__floatsisf+0x6c>
    1dc8:	9a 95       	dec	r25
    1dca:	66 0f       	add	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	da f7       	brpl	.-10     	; 0x1dc8 <__floatsisf+0x62>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret

00001ddc <__fp_split3>:
    1ddc:	57 fd       	sbrc	r21, 7
    1dde:	90 58       	subi	r25, 0x80	; 128
    1de0:	44 0f       	add	r20, r20
    1de2:	55 1f       	adc	r21, r21
    1de4:	59 f0       	breq	.+22     	; 0x1dfc <__fp_splitA+0x10>
    1de6:	5f 3f       	cpi	r21, 0xFF	; 255
    1de8:	71 f0       	breq	.+28     	; 0x1e06 <__fp_splitA+0x1a>
    1dea:	47 95       	ror	r20

00001dec <__fp_splitA>:
    1dec:	88 0f       	add	r24, r24
    1dee:	97 fb       	bst	r25, 7
    1df0:	99 1f       	adc	r25, r25
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <__fp_splitA+0x20>
    1df4:	9f 3f       	cpi	r25, 0xFF	; 255
    1df6:	79 f0       	breq	.+30     	; 0x1e16 <__fp_splitA+0x2a>
    1df8:	87 95       	ror	r24
    1dfa:	08 95       	ret
    1dfc:	12 16       	cp	r1, r18
    1dfe:	13 06       	cpc	r1, r19
    1e00:	14 06       	cpc	r1, r20
    1e02:	55 1f       	adc	r21, r21
    1e04:	f2 cf       	rjmp	.-28     	; 0x1dea <__fp_split3+0xe>
    1e06:	46 95       	lsr	r20
    1e08:	f1 df       	rcall	.-30     	; 0x1dec <__fp_splitA>
    1e0a:	08 c0       	rjmp	.+16     	; 0x1e1c <__fp_splitA+0x30>
    1e0c:	16 16       	cp	r1, r22
    1e0e:	17 06       	cpc	r1, r23
    1e10:	18 06       	cpc	r1, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	f1 cf       	rjmp	.-30     	; 0x1df8 <__fp_splitA+0xc>
    1e16:	86 95       	lsr	r24
    1e18:	71 05       	cpc	r23, r1
    1e1a:	61 05       	cpc	r22, r1
    1e1c:	08 94       	sec
    1e1e:	08 95       	ret

00001e20 <__fp_zero>:
    1e20:	e8 94       	clt

00001e22 <__fp_szero>:
    1e22:	bb 27       	eor	r27, r27
    1e24:	66 27       	eor	r22, r22
    1e26:	77 27       	eor	r23, r23
    1e28:	cb 01       	movw	r24, r22
    1e2a:	97 f9       	bld	r25, 7
    1e2c:	08 95       	ret

00001e2e <__mulsf3>:
    1e2e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__mulsf3x>
    1e32:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__fp_round>
    1e36:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__fp_pscA>
    1e3a:	38 f0       	brcs	.+14     	; 0x1e4a <__mulsf3+0x1c>
    1e3c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__fp_pscB>
    1e40:	20 f0       	brcs	.+8      	; 0x1e4a <__mulsf3+0x1c>
    1e42:	95 23       	and	r25, r21
    1e44:	11 f0       	breq	.+4      	; 0x1e4a <__mulsf3+0x1c>
    1e46:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_inf>
    1e4a:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__fp_nan>
    1e4e:	11 24       	eor	r1, r1
    1e50:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__fp_szero>

00001e54 <__mulsf3x>:
    1e54:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__fp_split3>
    1e58:	70 f3       	brcs	.-36     	; 0x1e36 <__mulsf3+0x8>

00001e5a <__mulsf3_pse>:
    1e5a:	95 9f       	mul	r25, r21
    1e5c:	c1 f3       	breq	.-16     	; 0x1e4e <__mulsf3+0x20>
    1e5e:	95 0f       	add	r25, r21
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	55 1f       	adc	r21, r21
    1e64:	62 9f       	mul	r22, r18
    1e66:	f0 01       	movw	r30, r0
    1e68:	72 9f       	mul	r23, r18
    1e6a:	bb 27       	eor	r27, r27
    1e6c:	f0 0d       	add	r31, r0
    1e6e:	b1 1d       	adc	r27, r1
    1e70:	63 9f       	mul	r22, r19
    1e72:	aa 27       	eor	r26, r26
    1e74:	f0 0d       	add	r31, r0
    1e76:	b1 1d       	adc	r27, r1
    1e78:	aa 1f       	adc	r26, r26
    1e7a:	64 9f       	mul	r22, r20
    1e7c:	66 27       	eor	r22, r22
    1e7e:	b0 0d       	add	r27, r0
    1e80:	a1 1d       	adc	r26, r1
    1e82:	66 1f       	adc	r22, r22
    1e84:	82 9f       	mul	r24, r18
    1e86:	22 27       	eor	r18, r18
    1e88:	b0 0d       	add	r27, r0
    1e8a:	a1 1d       	adc	r26, r1
    1e8c:	62 1f       	adc	r22, r18
    1e8e:	73 9f       	mul	r23, r19
    1e90:	b0 0d       	add	r27, r0
    1e92:	a1 1d       	adc	r26, r1
    1e94:	62 1f       	adc	r22, r18
    1e96:	83 9f       	mul	r24, r19
    1e98:	a0 0d       	add	r26, r0
    1e9a:	61 1d       	adc	r22, r1
    1e9c:	22 1f       	adc	r18, r18
    1e9e:	74 9f       	mul	r23, r20
    1ea0:	33 27       	eor	r19, r19
    1ea2:	a0 0d       	add	r26, r0
    1ea4:	61 1d       	adc	r22, r1
    1ea6:	23 1f       	adc	r18, r19
    1ea8:	84 9f       	mul	r24, r20
    1eaa:	60 0d       	add	r22, r0
    1eac:	21 1d       	adc	r18, r1
    1eae:	82 2f       	mov	r24, r18
    1eb0:	76 2f       	mov	r23, r22
    1eb2:	6a 2f       	mov	r22, r26
    1eb4:	11 24       	eor	r1, r1
    1eb6:	9f 57       	subi	r25, 0x7F	; 127
    1eb8:	50 40       	sbci	r21, 0x00	; 0
    1eba:	9a f0       	brmi	.+38     	; 0x1ee2 <__mulsf3_pse+0x88>
    1ebc:	f1 f0       	breq	.+60     	; 0x1efa <__mulsf3_pse+0xa0>
    1ebe:	88 23       	and	r24, r24
    1ec0:	4a f0       	brmi	.+18     	; 0x1ed4 <__mulsf3_pse+0x7a>
    1ec2:	ee 0f       	add	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	bb 1f       	adc	r27, r27
    1ec8:	66 1f       	adc	r22, r22
    1eca:	77 1f       	adc	r23, r23
    1ecc:	88 1f       	adc	r24, r24
    1ece:	91 50       	subi	r25, 0x01	; 1
    1ed0:	50 40       	sbci	r21, 0x00	; 0
    1ed2:	a9 f7       	brne	.-22     	; 0x1ebe <__mulsf3_pse+0x64>
    1ed4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed6:	51 05       	cpc	r21, r1
    1ed8:	80 f0       	brcs	.+32     	; 0x1efa <__mulsf3_pse+0xa0>
    1eda:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__fp_inf>
    1ede:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__fp_szero>
    1ee2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee4:	e4 f3       	brlt	.-8      	; 0x1ede <__mulsf3_pse+0x84>
    1ee6:	98 3e       	cpi	r25, 0xE8	; 232
    1ee8:	d4 f3       	brlt	.-12     	; 0x1ede <__mulsf3_pse+0x84>
    1eea:	86 95       	lsr	r24
    1eec:	77 95       	ror	r23
    1eee:	67 95       	ror	r22
    1ef0:	b7 95       	ror	r27
    1ef2:	f7 95       	ror	r31
    1ef4:	e7 95       	ror	r30
    1ef6:	9f 5f       	subi	r25, 0xFF	; 255
    1ef8:	c1 f7       	brne	.-16     	; 0x1eea <__mulsf3_pse+0x90>
    1efa:	fe 2b       	or	r31, r30
    1efc:	88 0f       	add	r24, r24
    1efe:	91 1d       	adc	r25, r1
    1f00:	96 95       	lsr	r25
    1f02:	87 95       	ror	r24
    1f04:	97 f9       	bld	r25, 7
    1f06:	08 95       	ret

00001f08 <__fp_inf>:
    1f08:	97 f9       	bld	r25, 7
    1f0a:	9f 67       	ori	r25, 0x7F	; 127
    1f0c:	80 e8       	ldi	r24, 0x80	; 128
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	08 95       	ret

00001f14 <__fp_nan>:
    1f14:	9f ef       	ldi	r25, 0xFF	; 255
    1f16:	80 ec       	ldi	r24, 0xC0	; 192
    1f18:	08 95       	ret

00001f1a <__fp_pscA>:
    1f1a:	00 24       	eor	r0, r0
    1f1c:	0a 94       	dec	r0
    1f1e:	16 16       	cp	r1, r22
    1f20:	17 06       	cpc	r1, r23
    1f22:	18 06       	cpc	r1, r24
    1f24:	09 06       	cpc	r0, r25
    1f26:	08 95       	ret

00001f28 <__fp_pscB>:
    1f28:	00 24       	eor	r0, r0
    1f2a:	0a 94       	dec	r0
    1f2c:	12 16       	cp	r1, r18
    1f2e:	13 06       	cpc	r1, r19
    1f30:	14 06       	cpc	r1, r20
    1f32:	05 06       	cpc	r0, r21
    1f34:	08 95       	ret

00001f36 <__fp_round>:
    1f36:	09 2e       	mov	r0, r25
    1f38:	03 94       	inc	r0
    1f3a:	00 0c       	add	r0, r0
    1f3c:	11 f4       	brne	.+4      	; 0x1f42 <__fp_round+0xc>
    1f3e:	88 23       	and	r24, r24
    1f40:	52 f0       	brmi	.+20     	; 0x1f56 <__fp_round+0x20>
    1f42:	bb 0f       	add	r27, r27
    1f44:	40 f4       	brcc	.+16     	; 0x1f56 <__fp_round+0x20>
    1f46:	bf 2b       	or	r27, r31
    1f48:	11 f4       	brne	.+4      	; 0x1f4e <__fp_round+0x18>
    1f4a:	60 ff       	sbrs	r22, 0
    1f4c:	04 c0       	rjmp	.+8      	; 0x1f56 <__fp_round+0x20>
    1f4e:	6f 5f       	subi	r22, 0xFF	; 255
    1f50:	7f 4f       	sbci	r23, 0xFF	; 255
    1f52:	8f 4f       	sbci	r24, 0xFF	; 255
    1f54:	9f 4f       	sbci	r25, 0xFF	; 255
    1f56:	08 95       	ret

00001f58 <__mulsi3>:
    1f58:	db 01       	movw	r26, r22
    1f5a:	8f 93       	push	r24
    1f5c:	9f 93       	push	r25
    1f5e:	0e 94 11 10 	call	0x2022	; 0x2022 <__muluhisi3>
    1f62:	bf 91       	pop	r27
    1f64:	af 91       	pop	r26
    1f66:	a2 9f       	mul	r26, r18
    1f68:	80 0d       	add	r24, r0
    1f6a:	91 1d       	adc	r25, r1
    1f6c:	a3 9f       	mul	r26, r19
    1f6e:	90 0d       	add	r25, r0
    1f70:	b2 9f       	mul	r27, r18
    1f72:	90 0d       	add	r25, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	08 95       	ret

00001f78 <__divmodhi4>:
    1f78:	97 fb       	bst	r25, 7
    1f7a:	07 2e       	mov	r0, r23
    1f7c:	16 f4       	brtc	.+4      	; 0x1f82 <__divmodhi4+0xa>
    1f7e:	00 94       	com	r0
    1f80:	07 d0       	rcall	.+14     	; 0x1f90 <__divmodhi4_neg1>
    1f82:	77 fd       	sbrc	r23, 7
    1f84:	09 d0       	rcall	.+18     	; 0x1f98 <__divmodhi4_neg2>
    1f86:	0e 94 1c 10 	call	0x2038	; 0x2038 <__udivmodhi4>
    1f8a:	07 fc       	sbrc	r0, 7
    1f8c:	05 d0       	rcall	.+10     	; 0x1f98 <__divmodhi4_neg2>
    1f8e:	3e f4       	brtc	.+14     	; 0x1f9e <__divmodhi4_exit>

00001f90 <__divmodhi4_neg1>:
    1f90:	90 95       	com	r25
    1f92:	81 95       	neg	r24
    1f94:	9f 4f       	sbci	r25, 0xFF	; 255
    1f96:	08 95       	ret

00001f98 <__divmodhi4_neg2>:
    1f98:	70 95       	com	r23
    1f9a:	61 95       	neg	r22
    1f9c:	7f 4f       	sbci	r23, 0xFF	; 255

00001f9e <__divmodhi4_exit>:
    1f9e:	08 95       	ret

00001fa0 <__udivmodsi4>:
    1fa0:	a1 e2       	ldi	r26, 0x21	; 33
    1fa2:	1a 2e       	mov	r1, r26
    1fa4:	aa 1b       	sub	r26, r26
    1fa6:	bb 1b       	sub	r27, r27
    1fa8:	fd 01       	movw	r30, r26
    1faa:	0d c0       	rjmp	.+26     	; 0x1fc6 <__udivmodsi4_ep>

00001fac <__udivmodsi4_loop>:
    1fac:	aa 1f       	adc	r26, r26
    1fae:	bb 1f       	adc	r27, r27
    1fb0:	ee 1f       	adc	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
    1fb4:	a2 17       	cp	r26, r18
    1fb6:	b3 07       	cpc	r27, r19
    1fb8:	e4 07       	cpc	r30, r20
    1fba:	f5 07       	cpc	r31, r21
    1fbc:	20 f0       	brcs	.+8      	; 0x1fc6 <__udivmodsi4_ep>
    1fbe:	a2 1b       	sub	r26, r18
    1fc0:	b3 0b       	sbc	r27, r19
    1fc2:	e4 0b       	sbc	r30, r20
    1fc4:	f5 0b       	sbc	r31, r21

00001fc6 <__udivmodsi4_ep>:
    1fc6:	66 1f       	adc	r22, r22
    1fc8:	77 1f       	adc	r23, r23
    1fca:	88 1f       	adc	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	1a 94       	dec	r1
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <__udivmodsi4_loop>
    1fd2:	60 95       	com	r22
    1fd4:	70 95       	com	r23
    1fd6:	80 95       	com	r24
    1fd8:	90 95       	com	r25
    1fda:	9b 01       	movw	r18, r22
    1fdc:	ac 01       	movw	r20, r24
    1fde:	bd 01       	movw	r22, r26
    1fe0:	cf 01       	movw	r24, r30
    1fe2:	08 95       	ret

00001fe4 <__divmodsi4>:
    1fe4:	05 2e       	mov	r0, r21
    1fe6:	97 fb       	bst	r25, 7
    1fe8:	1e f4       	brtc	.+6      	; 0x1ff0 <__divmodsi4+0xc>
    1fea:	00 94       	com	r0
    1fec:	0e 94 09 10 	call	0x2012	; 0x2012 <__negsi2>
    1ff0:	57 fd       	sbrc	r21, 7
    1ff2:	07 d0       	rcall	.+14     	; 0x2002 <__divmodsi4_neg2>
    1ff4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__udivmodsi4>
    1ff8:	07 fc       	sbrc	r0, 7
    1ffa:	03 d0       	rcall	.+6      	; 0x2002 <__divmodsi4_neg2>
    1ffc:	4e f4       	brtc	.+18     	; 0x2010 <__divmodsi4_exit>
    1ffe:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__negsi2>

00002002 <__divmodsi4_neg2>:
    2002:	50 95       	com	r21
    2004:	40 95       	com	r20
    2006:	30 95       	com	r19
    2008:	21 95       	neg	r18
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	4f 4f       	sbci	r20, 0xFF	; 255
    200e:	5f 4f       	sbci	r21, 0xFF	; 255

00002010 <__divmodsi4_exit>:
    2010:	08 95       	ret

00002012 <__negsi2>:
    2012:	90 95       	com	r25
    2014:	80 95       	com	r24
    2016:	70 95       	com	r23
    2018:	61 95       	neg	r22
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	8f 4f       	sbci	r24, 0xFF	; 255
    201e:	9f 4f       	sbci	r25, 0xFF	; 255
    2020:	08 95       	ret

00002022 <__muluhisi3>:
    2022:	0e 94 36 10 	call	0x206c	; 0x206c <__umulhisi3>
    2026:	a5 9f       	mul	r26, r21
    2028:	90 0d       	add	r25, r0
    202a:	b4 9f       	mul	r27, r20
    202c:	90 0d       	add	r25, r0
    202e:	a4 9f       	mul	r26, r20
    2030:	80 0d       	add	r24, r0
    2032:	91 1d       	adc	r25, r1
    2034:	11 24       	eor	r1, r1
    2036:	08 95       	ret

00002038 <__udivmodhi4>:
    2038:	aa 1b       	sub	r26, r26
    203a:	bb 1b       	sub	r27, r27
    203c:	51 e1       	ldi	r21, 0x11	; 17
    203e:	07 c0       	rjmp	.+14     	; 0x204e <__udivmodhi4_ep>

00002040 <__udivmodhi4_loop>:
    2040:	aa 1f       	adc	r26, r26
    2042:	bb 1f       	adc	r27, r27
    2044:	a6 17       	cp	r26, r22
    2046:	b7 07       	cpc	r27, r23
    2048:	10 f0       	brcs	.+4      	; 0x204e <__udivmodhi4_ep>
    204a:	a6 1b       	sub	r26, r22
    204c:	b7 0b       	sbc	r27, r23

0000204e <__udivmodhi4_ep>:
    204e:	88 1f       	adc	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	5a 95       	dec	r21
    2054:	a9 f7       	brne	.-22     	; 0x2040 <__udivmodhi4_loop>
    2056:	80 95       	com	r24
    2058:	90 95       	com	r25
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	08 95       	ret

00002060 <__tablejump2__>:
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	05 90       	lpm	r0, Z+
    2066:	f4 91       	lpm	r31, Z
    2068:	e0 2d       	mov	r30, r0
    206a:	09 94       	ijmp

0000206c <__umulhisi3>:
    206c:	a2 9f       	mul	r26, r18
    206e:	b0 01       	movw	r22, r0
    2070:	b3 9f       	mul	r27, r19
    2072:	c0 01       	movw	r24, r0
    2074:	a3 9f       	mul	r26, r19
    2076:	70 0d       	add	r23, r0
    2078:	81 1d       	adc	r24, r1
    207a:	11 24       	eor	r1, r1
    207c:	91 1d       	adc	r25, r1
    207e:	b2 9f       	mul	r27, r18
    2080:	70 0d       	add	r23, r0
    2082:	81 1d       	adc	r24, r1
    2084:	11 24       	eor	r1, r1
    2086:	91 1d       	adc	r25, r1
    2088:	08 95       	ret

0000208a <realloc>:
    208a:	a0 e0       	ldi	r26, 0x00	; 0
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	eb e4       	ldi	r30, 0x4B	; 75
    2090:	f0 e1       	ldi	r31, 0x10	; 16
    2092:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x8>
    2096:	ec 01       	movw	r28, r24
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	21 f4       	brne	.+8      	; 0x20a4 <realloc+0x1a>
    209c:	cb 01       	movw	r24, r22
    209e:	0e 94 14 11 	call	0x2228	; 0x2228 <malloc>
    20a2:	b4 c0       	rjmp	.+360    	; 0x220c <realloc+0x182>
    20a4:	fc 01       	movw	r30, r24
    20a6:	e6 0f       	add	r30, r22
    20a8:	f7 1f       	adc	r31, r23
    20aa:	9c 01       	movw	r18, r24
    20ac:	22 50       	subi	r18, 0x02	; 2
    20ae:	31 09       	sbc	r19, r1
    20b0:	e2 17       	cp	r30, r18
    20b2:	f3 07       	cpc	r31, r19
    20b4:	08 f4       	brcc	.+2      	; 0x20b8 <realloc+0x2e>
    20b6:	a8 c0       	rjmp	.+336    	; 0x2208 <realloc+0x17e>
    20b8:	d9 01       	movw	r26, r18
    20ba:	0d 91       	ld	r16, X+
    20bc:	1c 91       	ld	r17, X
    20be:	11 97       	sbiw	r26, 0x01	; 1
    20c0:	06 17       	cp	r16, r22
    20c2:	17 07       	cpc	r17, r23
    20c4:	b0 f0       	brcs	.+44     	; 0x20f2 <realloc+0x68>
    20c6:	05 30       	cpi	r16, 0x05	; 5
    20c8:	11 05       	cpc	r17, r1
    20ca:	08 f4       	brcc	.+2      	; 0x20ce <realloc+0x44>
    20cc:	9b c0       	rjmp	.+310    	; 0x2204 <realloc+0x17a>
    20ce:	c8 01       	movw	r24, r16
    20d0:	04 97       	sbiw	r24, 0x04	; 4
    20d2:	86 17       	cp	r24, r22
    20d4:	97 07       	cpc	r25, r23
    20d6:	08 f4       	brcc	.+2      	; 0x20da <realloc+0x50>
    20d8:	95 c0       	rjmp	.+298    	; 0x2204 <realloc+0x17a>
    20da:	02 50       	subi	r16, 0x02	; 2
    20dc:	11 09       	sbc	r17, r1
    20de:	06 1b       	sub	r16, r22
    20e0:	17 0b       	sbc	r17, r23
    20e2:	01 93       	st	Z+, r16
    20e4:	11 93       	st	Z+, r17
    20e6:	6d 93       	st	X+, r22
    20e8:	7c 93       	st	X, r23
    20ea:	cf 01       	movw	r24, r30
    20ec:	0e 94 ac 11 	call	0x2358	; 0x2358 <free>
    20f0:	89 c0       	rjmp	.+274    	; 0x2204 <realloc+0x17a>
    20f2:	5b 01       	movw	r10, r22
    20f4:	a0 1a       	sub	r10, r16
    20f6:	b1 0a       	sbc	r11, r17
    20f8:	4c 01       	movw	r8, r24
    20fa:	80 0e       	add	r8, r16
    20fc:	91 1e       	adc	r9, r17
    20fe:	a0 91 cb 06 	lds	r26, 0x06CB	; 0x8006cb <__flp>
    2102:	b0 91 cc 06 	lds	r27, 0x06CC	; 0x8006cc <__flp+0x1>
    2106:	61 2c       	mov	r6, r1
    2108:	71 2c       	mov	r7, r1
    210a:	e1 2c       	mov	r14, r1
    210c:	f1 2c       	mov	r15, r1
    210e:	10 97       	sbiw	r26, 0x00	; 0
    2110:	09 f4       	brne	.+2      	; 0x2114 <realloc+0x8a>
    2112:	46 c0       	rjmp	.+140    	; 0x21a0 <realloc+0x116>
    2114:	8d 91       	ld	r24, X+
    2116:	9c 91       	ld	r25, X
    2118:	11 97       	sbiw	r26, 0x01	; 1
    211a:	a8 15       	cp	r26, r8
    211c:	b9 05       	cpc	r27, r9
    211e:	b1 f5       	brne	.+108    	; 0x218c <realloc+0x102>
    2120:	6c 01       	movw	r12, r24
    2122:	42 e0       	ldi	r20, 0x02	; 2
    2124:	c4 0e       	add	r12, r20
    2126:	d1 1c       	adc	r13, r1
    2128:	ca 14       	cp	r12, r10
    212a:	db 04       	cpc	r13, r11
    212c:	78 f1       	brcs	.+94     	; 0x218c <realloc+0x102>
    212e:	4c 01       	movw	r8, r24
    2130:	8a 18       	sub	r8, r10
    2132:	9b 08       	sbc	r9, r11
    2134:	64 01       	movw	r12, r8
    2136:	42 e0       	ldi	r20, 0x02	; 2
    2138:	c4 0e       	add	r12, r20
    213a:	d1 1c       	adc	r13, r1
    213c:	12 96       	adiw	r26, 0x02	; 2
    213e:	bc 90       	ld	r11, X
    2140:	12 97       	sbiw	r26, 0x02	; 2
    2142:	13 96       	adiw	r26, 0x03	; 3
    2144:	ac 91       	ld	r26, X
    2146:	b5 e0       	ldi	r27, 0x05	; 5
    2148:	cb 16       	cp	r12, r27
    214a:	d1 04       	cpc	r13, r1
    214c:	40 f0       	brcs	.+16     	; 0x215e <realloc+0xd4>
    214e:	b2 82       	std	Z+2, r11	; 0x02
    2150:	a3 83       	std	Z+3, r26	; 0x03
    2152:	91 82       	std	Z+1, r9	; 0x01
    2154:	80 82       	st	Z, r8
    2156:	d9 01       	movw	r26, r18
    2158:	6d 93       	st	X+, r22
    215a:	7c 93       	st	X, r23
    215c:	09 c0       	rjmp	.+18     	; 0x2170 <realloc+0xe6>
    215e:	0e 5f       	subi	r16, 0xFE	; 254
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	80 0f       	add	r24, r16
    2164:	91 1f       	adc	r25, r17
    2166:	f9 01       	movw	r30, r18
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	eb 2d       	mov	r30, r11
    216e:	fa 2f       	mov	r31, r26
    2170:	e1 14       	cp	r14, r1
    2172:	f1 04       	cpc	r15, r1
    2174:	31 f0       	breq	.+12     	; 0x2182 <realloc+0xf8>
    2176:	d7 01       	movw	r26, r14
    2178:	13 96       	adiw	r26, 0x03	; 3
    217a:	fc 93       	st	X, r31
    217c:	ee 93       	st	-X, r30
    217e:	12 97       	sbiw	r26, 0x02	; 2
    2180:	41 c0       	rjmp	.+130    	; 0x2204 <realloc+0x17a>
    2182:	f0 93 cc 06 	sts	0x06CC, r31	; 0x8006cc <__flp+0x1>
    2186:	e0 93 cb 06 	sts	0x06CB, r30	; 0x8006cb <__flp>
    218a:	3c c0       	rjmp	.+120    	; 0x2204 <realloc+0x17a>
    218c:	68 16       	cp	r6, r24
    218e:	79 06       	cpc	r7, r25
    2190:	08 f4       	brcc	.+2      	; 0x2194 <realloc+0x10a>
    2192:	3c 01       	movw	r6, r24
    2194:	7d 01       	movw	r14, r26
    2196:	12 96       	adiw	r26, 0x02	; 2
    2198:	0d 90       	ld	r0, X+
    219a:	bc 91       	ld	r27, X
    219c:	a0 2d       	mov	r26, r0
    219e:	b7 cf       	rjmp	.-146    	; 0x210e <realloc+0x84>
    21a0:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <__brkval>
    21a4:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <__brkval+0x1>
    21a8:	88 16       	cp	r8, r24
    21aa:	99 06       	cpc	r9, r25
    21ac:	e1 f4       	brne	.+56     	; 0x21e6 <realloc+0x15c>
    21ae:	66 16       	cp	r6, r22
    21b0:	77 06       	cpc	r7, r23
    21b2:	c8 f4       	brcc	.+50     	; 0x21e6 <realloc+0x15c>
    21b4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__malloc_heap_end>
    21b8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__malloc_heap_end+0x1>
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	41 f4       	brne	.+16     	; 0x21d0 <realloc+0x146>
    21c0:	8d b7       	in	r24, 0x3d	; 61
    21c2:	9e b7       	in	r25, 0x3e	; 62
    21c4:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <__malloc_margin>
    21c8:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <__malloc_margin+0x1>
    21cc:	84 1b       	sub	r24, r20
    21ce:	95 0b       	sbc	r25, r21
    21d0:	e8 17       	cp	r30, r24
    21d2:	f9 07       	cpc	r31, r25
    21d4:	c8 f4       	brcc	.+50     	; 0x2208 <realloc+0x17e>
    21d6:	f0 93 ca 06 	sts	0x06CA, r31	; 0x8006ca <__brkval+0x1>
    21da:	e0 93 c9 06 	sts	0x06C9, r30	; 0x8006c9 <__brkval>
    21de:	f9 01       	movw	r30, r18
    21e0:	71 83       	std	Z+1, r23	; 0x01
    21e2:	60 83       	st	Z, r22
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <realloc+0x17a>
    21e6:	cb 01       	movw	r24, r22
    21e8:	0e 94 14 11 	call	0x2228	; 0x2228 <malloc>
    21ec:	7c 01       	movw	r14, r24
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	59 f0       	breq	.+22     	; 0x2208 <realloc+0x17e>
    21f2:	a8 01       	movw	r20, r16
    21f4:	be 01       	movw	r22, r28
    21f6:	0e 94 0b 11 	call	0x2216	; 0x2216 <memcpy>
    21fa:	ce 01       	movw	r24, r28
    21fc:	0e 94 ac 11 	call	0x2358	; 0x2358 <free>
    2200:	c7 01       	movw	r24, r14
    2202:	04 c0       	rjmp	.+8      	; 0x220c <realloc+0x182>
    2204:	ce 01       	movw	r24, r28
    2206:	02 c0       	rjmp	.+4      	; 0x220c <realloc+0x182>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	ee e0       	ldi	r30, 0x0E	; 14
    2212:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x8>

00002216 <memcpy>:
    2216:	fb 01       	movw	r30, r22
    2218:	dc 01       	movw	r26, r24
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <memcpy+0xa>
    221c:	01 90       	ld	r0, Z+
    221e:	0d 92       	st	X+, r0
    2220:	41 50       	subi	r20, 0x01	; 1
    2222:	50 40       	sbci	r21, 0x00	; 0
    2224:	d8 f7       	brcc	.-10     	; 0x221c <memcpy+0x6>
    2226:	08 95       	ret

00002228 <malloc>:
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	82 30       	cpi	r24, 0x02	; 2
    2232:	91 05       	cpc	r25, r1
    2234:	10 f4       	brcc	.+4      	; 0x223a <malloc+0x12>
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	e0 91 cb 06 	lds	r30, 0x06CB	; 0x8006cb <__flp>
    223e:	f0 91 cc 06 	lds	r31, 0x06CC	; 0x8006cc <__flp+0x1>
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	a0 e0       	ldi	r26, 0x00	; 0
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	30 97       	sbiw	r30, 0x00	; 0
    224c:	19 f1       	breq	.+70     	; 0x2294 <malloc+0x6c>
    224e:	40 81       	ld	r20, Z
    2250:	51 81       	ldd	r21, Z+1	; 0x01
    2252:	02 81       	ldd	r16, Z+2	; 0x02
    2254:	13 81       	ldd	r17, Z+3	; 0x03
    2256:	48 17       	cp	r20, r24
    2258:	59 07       	cpc	r21, r25
    225a:	c8 f0       	brcs	.+50     	; 0x228e <malloc+0x66>
    225c:	84 17       	cp	r24, r20
    225e:	95 07       	cpc	r25, r21
    2260:	69 f4       	brne	.+26     	; 0x227c <malloc+0x54>
    2262:	10 97       	sbiw	r26, 0x00	; 0
    2264:	31 f0       	breq	.+12     	; 0x2272 <malloc+0x4a>
    2266:	12 96       	adiw	r26, 0x02	; 2
    2268:	0c 93       	st	X, r16
    226a:	12 97       	sbiw	r26, 0x02	; 2
    226c:	13 96       	adiw	r26, 0x03	; 3
    226e:	1c 93       	st	X, r17
    2270:	27 c0       	rjmp	.+78     	; 0x22c0 <malloc+0x98>
    2272:	00 93 cb 06 	sts	0x06CB, r16	; 0x8006cb <__flp>
    2276:	10 93 cc 06 	sts	0x06CC, r17	; 0x8006cc <__flp+0x1>
    227a:	22 c0       	rjmp	.+68     	; 0x22c0 <malloc+0x98>
    227c:	21 15       	cp	r18, r1
    227e:	31 05       	cpc	r19, r1
    2280:	19 f0       	breq	.+6      	; 0x2288 <malloc+0x60>
    2282:	42 17       	cp	r20, r18
    2284:	53 07       	cpc	r21, r19
    2286:	18 f4       	brcc	.+6      	; 0x228e <malloc+0x66>
    2288:	9a 01       	movw	r18, r20
    228a:	bd 01       	movw	r22, r26
    228c:	ef 01       	movw	r28, r30
    228e:	df 01       	movw	r26, r30
    2290:	f8 01       	movw	r30, r16
    2292:	db cf       	rjmp	.-74     	; 0x224a <malloc+0x22>
    2294:	21 15       	cp	r18, r1
    2296:	31 05       	cpc	r19, r1
    2298:	f9 f0       	breq	.+62     	; 0x22d8 <malloc+0xb0>
    229a:	28 1b       	sub	r18, r24
    229c:	39 0b       	sbc	r19, r25
    229e:	24 30       	cpi	r18, 0x04	; 4
    22a0:	31 05       	cpc	r19, r1
    22a2:	80 f4       	brcc	.+32     	; 0x22c4 <malloc+0x9c>
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	9b 81       	ldd	r25, Y+3	; 0x03
    22a8:	61 15       	cp	r22, r1
    22aa:	71 05       	cpc	r23, r1
    22ac:	21 f0       	breq	.+8      	; 0x22b6 <malloc+0x8e>
    22ae:	fb 01       	movw	r30, r22
    22b0:	93 83       	std	Z+3, r25	; 0x03
    22b2:	82 83       	std	Z+2, r24	; 0x02
    22b4:	04 c0       	rjmp	.+8      	; 0x22be <malloc+0x96>
    22b6:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <__flp+0x1>
    22ba:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <__flp>
    22be:	fe 01       	movw	r30, r28
    22c0:	32 96       	adiw	r30, 0x02	; 2
    22c2:	44 c0       	rjmp	.+136    	; 0x234c <malloc+0x124>
    22c4:	fe 01       	movw	r30, r28
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	81 93       	st	Z+, r24
    22cc:	91 93       	st	Z+, r25
    22ce:	22 50       	subi	r18, 0x02	; 2
    22d0:	31 09       	sbc	r19, r1
    22d2:	39 83       	std	Y+1, r19	; 0x01
    22d4:	28 83       	st	Y, r18
    22d6:	3a c0       	rjmp	.+116    	; 0x234c <malloc+0x124>
    22d8:	20 91 c9 06 	lds	r18, 0x06C9	; 0x8006c9 <__brkval>
    22dc:	30 91 ca 06 	lds	r19, 0x06CA	; 0x8006ca <__brkval+0x1>
    22e0:	23 2b       	or	r18, r19
    22e2:	41 f4       	brne	.+16     	; 0x22f4 <malloc+0xcc>
    22e4:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <__malloc_heap_start>
    22e8:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__malloc_heap_start+0x1>
    22ec:	30 93 ca 06 	sts	0x06CA, r19	; 0x8006ca <__brkval+0x1>
    22f0:	20 93 c9 06 	sts	0x06C9, r18	; 0x8006c9 <__brkval>
    22f4:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <__malloc_heap_end>
    22f8:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <__malloc_heap_end+0x1>
    22fc:	21 15       	cp	r18, r1
    22fe:	31 05       	cpc	r19, r1
    2300:	41 f4       	brne	.+16     	; 0x2312 <malloc+0xea>
    2302:	2d b7       	in	r18, 0x3d	; 61
    2304:	3e b7       	in	r19, 0x3e	; 62
    2306:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <__malloc_margin>
    230a:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <__malloc_margin+0x1>
    230e:	24 1b       	sub	r18, r20
    2310:	35 0b       	sbc	r19, r21
    2312:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <__brkval>
    2316:	f0 91 ca 06 	lds	r31, 0x06CA	; 0x8006ca <__brkval+0x1>
    231a:	e2 17       	cp	r30, r18
    231c:	f3 07       	cpc	r31, r19
    231e:	a0 f4       	brcc	.+40     	; 0x2348 <malloc+0x120>
    2320:	2e 1b       	sub	r18, r30
    2322:	3f 0b       	sbc	r19, r31
    2324:	28 17       	cp	r18, r24
    2326:	39 07       	cpc	r19, r25
    2328:	78 f0       	brcs	.+30     	; 0x2348 <malloc+0x120>
    232a:	ac 01       	movw	r20, r24
    232c:	4e 5f       	subi	r20, 0xFE	; 254
    232e:	5f 4f       	sbci	r21, 0xFF	; 255
    2330:	24 17       	cp	r18, r20
    2332:	35 07       	cpc	r19, r21
    2334:	48 f0       	brcs	.+18     	; 0x2348 <malloc+0x120>
    2336:	4e 0f       	add	r20, r30
    2338:	5f 1f       	adc	r21, r31
    233a:	50 93 ca 06 	sts	0x06CA, r21	; 0x8006ca <__brkval+0x1>
    233e:	40 93 c9 06 	sts	0x06C9, r20	; 0x8006c9 <__brkval>
    2342:	81 93       	st	Z+, r24
    2344:	91 93       	st	Z+, r25
    2346:	02 c0       	rjmp	.+4      	; 0x234c <malloc+0x124>
    2348:	e0 e0       	ldi	r30, 0x00	; 0
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	cf 01       	movw	r24, r30
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	08 95       	ret

00002358 <free>:
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	09 f4       	brne	.+2      	; 0x2362 <free+0xa>
    2360:	81 c0       	rjmp	.+258    	; 0x2464 <free+0x10c>
    2362:	fc 01       	movw	r30, r24
    2364:	32 97       	sbiw	r30, 0x02	; 2
    2366:	13 82       	std	Z+3, r1	; 0x03
    2368:	12 82       	std	Z+2, r1	; 0x02
    236a:	a0 91 cb 06 	lds	r26, 0x06CB	; 0x8006cb <__flp>
    236e:	b0 91 cc 06 	lds	r27, 0x06CC	; 0x8006cc <__flp+0x1>
    2372:	10 97       	sbiw	r26, 0x00	; 0
    2374:	81 f4       	brne	.+32     	; 0x2396 <free+0x3e>
    2376:	20 81       	ld	r18, Z
    2378:	31 81       	ldd	r19, Z+1	; 0x01
    237a:	82 0f       	add	r24, r18
    237c:	93 1f       	adc	r25, r19
    237e:	20 91 c9 06 	lds	r18, 0x06C9	; 0x8006c9 <__brkval>
    2382:	30 91 ca 06 	lds	r19, 0x06CA	; 0x8006ca <__brkval+0x1>
    2386:	28 17       	cp	r18, r24
    2388:	39 07       	cpc	r19, r25
    238a:	51 f5       	brne	.+84     	; 0x23e0 <free+0x88>
    238c:	f0 93 ca 06 	sts	0x06CA, r31	; 0x8006ca <__brkval+0x1>
    2390:	e0 93 c9 06 	sts	0x06C9, r30	; 0x8006c9 <__brkval>
    2394:	67 c0       	rjmp	.+206    	; 0x2464 <free+0x10c>
    2396:	ed 01       	movw	r28, r26
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	ce 17       	cp	r28, r30
    239e:	df 07       	cpc	r29, r31
    23a0:	40 f4       	brcc	.+16     	; 0x23b2 <free+0x5a>
    23a2:	4a 81       	ldd	r20, Y+2	; 0x02
    23a4:	5b 81       	ldd	r21, Y+3	; 0x03
    23a6:	9e 01       	movw	r18, r28
    23a8:	41 15       	cp	r20, r1
    23aa:	51 05       	cpc	r21, r1
    23ac:	f1 f0       	breq	.+60     	; 0x23ea <free+0x92>
    23ae:	ea 01       	movw	r28, r20
    23b0:	f5 cf       	rjmp	.-22     	; 0x239c <free+0x44>
    23b2:	d3 83       	std	Z+3, r29	; 0x03
    23b4:	c2 83       	std	Z+2, r28	; 0x02
    23b6:	40 81       	ld	r20, Z
    23b8:	51 81       	ldd	r21, Z+1	; 0x01
    23ba:	84 0f       	add	r24, r20
    23bc:	95 1f       	adc	r25, r21
    23be:	c8 17       	cp	r28, r24
    23c0:	d9 07       	cpc	r29, r25
    23c2:	59 f4       	brne	.+22     	; 0x23da <free+0x82>
    23c4:	88 81       	ld	r24, Y
    23c6:	99 81       	ldd	r25, Y+1	; 0x01
    23c8:	84 0f       	add	r24, r20
    23ca:	95 1f       	adc	r25, r21
    23cc:	02 96       	adiw	r24, 0x02	; 2
    23ce:	91 83       	std	Z+1, r25	; 0x01
    23d0:	80 83       	st	Z, r24
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	9b 81       	ldd	r25, Y+3	; 0x03
    23d6:	93 83       	std	Z+3, r25	; 0x03
    23d8:	82 83       	std	Z+2, r24	; 0x02
    23da:	21 15       	cp	r18, r1
    23dc:	31 05       	cpc	r19, r1
    23de:	29 f4       	brne	.+10     	; 0x23ea <free+0x92>
    23e0:	f0 93 cc 06 	sts	0x06CC, r31	; 0x8006cc <__flp+0x1>
    23e4:	e0 93 cb 06 	sts	0x06CB, r30	; 0x8006cb <__flp>
    23e8:	3d c0       	rjmp	.+122    	; 0x2464 <free+0x10c>
    23ea:	e9 01       	movw	r28, r18
    23ec:	fb 83       	std	Y+3, r31	; 0x03
    23ee:	ea 83       	std	Y+2, r30	; 0x02
    23f0:	49 91       	ld	r20, Y+
    23f2:	59 91       	ld	r21, Y+
    23f4:	c4 0f       	add	r28, r20
    23f6:	d5 1f       	adc	r29, r21
    23f8:	ec 17       	cp	r30, r28
    23fa:	fd 07       	cpc	r31, r29
    23fc:	61 f4       	brne	.+24     	; 0x2416 <free+0xbe>
    23fe:	80 81       	ld	r24, Z
    2400:	91 81       	ldd	r25, Z+1	; 0x01
    2402:	84 0f       	add	r24, r20
    2404:	95 1f       	adc	r25, r21
    2406:	02 96       	adiw	r24, 0x02	; 2
    2408:	e9 01       	movw	r28, r18
    240a:	99 83       	std	Y+1, r25	; 0x01
    240c:	88 83       	st	Y, r24
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	9b 83       	std	Y+3, r25	; 0x03
    2414:	8a 83       	std	Y+2, r24	; 0x02
    2416:	e0 e0       	ldi	r30, 0x00	; 0
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	12 96       	adiw	r26, 0x02	; 2
    241c:	8d 91       	ld	r24, X+
    241e:	9c 91       	ld	r25, X
    2420:	13 97       	sbiw	r26, 0x03	; 3
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	19 f0       	breq	.+6      	; 0x242c <free+0xd4>
    2426:	fd 01       	movw	r30, r26
    2428:	dc 01       	movw	r26, r24
    242a:	f7 cf       	rjmp	.-18     	; 0x241a <free+0xc2>
    242c:	8d 91       	ld	r24, X+
    242e:	9c 91       	ld	r25, X
    2430:	11 97       	sbiw	r26, 0x01	; 1
    2432:	9d 01       	movw	r18, r26
    2434:	2e 5f       	subi	r18, 0xFE	; 254
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	82 0f       	add	r24, r18
    243a:	93 1f       	adc	r25, r19
    243c:	20 91 c9 06 	lds	r18, 0x06C9	; 0x8006c9 <__brkval>
    2440:	30 91 ca 06 	lds	r19, 0x06CA	; 0x8006ca <__brkval+0x1>
    2444:	28 17       	cp	r18, r24
    2446:	39 07       	cpc	r19, r25
    2448:	69 f4       	brne	.+26     	; 0x2464 <free+0x10c>
    244a:	30 97       	sbiw	r30, 0x00	; 0
    244c:	29 f4       	brne	.+10     	; 0x2458 <free+0x100>
    244e:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <__flp+0x1>
    2452:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <__flp>
    2456:	02 c0       	rjmp	.+4      	; 0x245c <free+0x104>
    2458:	13 82       	std	Z+3, r1	; 0x03
    245a:	12 82       	std	Z+2, r1	; 0x02
    245c:	b0 93 ca 06 	sts	0x06CA, r27	; 0x8006ca <__brkval+0x1>
    2460:	a0 93 c9 06 	sts	0x06C9, r26	; 0x8006c9 <__brkval>
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	08 95       	ret

0000246a <__prologue_saves__>:
    246a:	2f 92       	push	r2
    246c:	3f 92       	push	r3
    246e:	4f 92       	push	r4
    2470:	5f 92       	push	r5
    2472:	6f 92       	push	r6
    2474:	7f 92       	push	r7
    2476:	8f 92       	push	r8
    2478:	9f 92       	push	r9
    247a:	af 92       	push	r10
    247c:	bf 92       	push	r11
    247e:	cf 92       	push	r12
    2480:	df 92       	push	r13
    2482:	ef 92       	push	r14
    2484:	ff 92       	push	r15
    2486:	0f 93       	push	r16
    2488:	1f 93       	push	r17
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	ca 1b       	sub	r28, r26
    2494:	db 0b       	sbc	r29, r27
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	09 94       	ijmp

000024a2 <__epilogue_restores__>:
    24a2:	2a 88       	ldd	r2, Y+18	; 0x12
    24a4:	39 88       	ldd	r3, Y+17	; 0x11
    24a6:	48 88       	ldd	r4, Y+16	; 0x10
    24a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    24aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    24ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    24ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    24b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    24b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    24b4:	b9 84       	ldd	r11, Y+9	; 0x09
    24b6:	c8 84       	ldd	r12, Y+8	; 0x08
    24b8:	df 80       	ldd	r13, Y+7	; 0x07
    24ba:	ee 80       	ldd	r14, Y+6	; 0x06
    24bc:	fd 80       	ldd	r15, Y+5	; 0x05
    24be:	0c 81       	ldd	r16, Y+4	; 0x04
    24c0:	1b 81       	ldd	r17, Y+3	; 0x03
    24c2:	aa 81       	ldd	r26, Y+2	; 0x02
    24c4:	b9 81       	ldd	r27, Y+1	; 0x01
    24c6:	ce 0f       	add	r28, r30
    24c8:	d1 1d       	adc	r29, r1
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	ed 01       	movw	r28, r26
    24d6:	08 95       	ret

000024d8 <_exit>:
    24d8:	f8 94       	cli

000024da <__stop_program>:
    24da:	ff cf       	rjmp	.-2      	; 0x24da <__stop_program>
