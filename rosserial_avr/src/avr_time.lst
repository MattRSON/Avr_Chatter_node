   1               		.file	"avr_time.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_11
  12               	__vector_11:
  13               	.LFB0:
  14               		.file 1 "avr_time.c"
   1:avr_time.c    **** #include "avr_time.h"
   2:avr_time.c    **** #include <avr/io.h>
   3:avr_time.c    **** #include <avr/interrupt.h>
   4:avr_time.c    **** 
   5:avr_time.c    **** #define CLOCK_TICKS_PER_MS F_CPU / 1000UL
   6:avr_time.c    **** // Timer0 is 8bits and is prescaled by 64
   7:avr_time.c    **** #define CLOCK_TICKS_PER_TIMER0_OVERFLOW 64UL * 256UL
   8:avr_time.c    **** 
   9:avr_time.c    **** volatile static uint32_t timer0_ticks = 0;
  10:avr_time.c    **** volatile static uint32_t overflow_ms = 0;
  11:avr_time.c    **** 
  12:avr_time.c    **** // The Timer0 overflow interrupt handler
  13:avr_time.c    **** ISR (TIMER0_OVF_vect)
  14:avr_time.c    **** {
  15               		.loc 1 14 0
  16               		.cfi_startproc
  17 0000 1F92      		push r1
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 1, -2
  21 0002 0F92      		push r0
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 0, -3
  25 0004 0FB6      		in r0,__SREG__
  26 0006 0F92      		push r0
  27 0008 1124      		clr __zero_reg__
  28 000a 2F93      		push r18
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 18, -4
  32 000c 8F93      		push r24
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 24, -5
  36 000e 9F93      		push r25
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 25, -6
  40 0010 AF93      		push r26
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 26, -7
  44 0012 BF93      		push r27
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 27, -8
  48               	/* prologue: Signal */
  49               	/* frame size = 0 */
  50               	/* stack size = 8 */
  51               	.L__stack_usage = 8
  15:avr_time.c    **** 	// Add an overflow's worth of time
  16:avr_time.c    **** 	timer0_ticks += CLOCK_TICKS_PER_TIMER0_OVERFLOW;
  52               		.loc 1 16 0
  53 0014 8091 0000 		lds r24,timer0_ticks
  54 0018 9091 0000 		lds r25,timer0_ticks+1
  55 001c A091 0000 		lds r26,timer0_ticks+2
  56 0020 B091 0000 		lds r27,timer0_ticks+3
  57 0024 905C      		subi r25,-64
  58 0026 AF4F      		sbci r26,-1
  59 0028 BF4F      		sbci r27,-1
  60               	.L4:
  17:avr_time.c    **** 	for(; timer0_ticks > CLOCK_TICKS_PER_MS; timer0_ticks -= CLOCK_TICKS_PER_MS)
  61               		.loc 1 17 0 discriminator 2
  62 002a 8093 0000 		sts timer0_ticks,r24
  63 002e 9093 0000 		sts timer0_ticks+1,r25
  64 0032 A093 0000 		sts timer0_ticks+2,r26
  65 0036 B093 0000 		sts timer0_ticks+3,r27
  66 003a 8091 0000 		lds r24,timer0_ticks
  67 003e 9091 0000 		lds r25,timer0_ticks+1
  68 0042 A091 0000 		lds r26,timer0_ticks+2
  69 0046 B091 0000 		lds r27,timer0_ticks+3
  70 004a 8134      		cpi r24,65
  71 004c 9F41      		sbci r25,31
  72 004e A105      		cpc r26,__zero_reg__
  73 0050 B105      		cpc r27,__zero_reg__
  74 0052 00F0      		brlo .L6
  18:avr_time.c    **** 	{
  19:avr_time.c    **** 		overflow_ms++;
  75               		.loc 1 19 0 discriminator 2
  76 0054 8091 0000 		lds r24,overflow_ms
  77 0058 9091 0000 		lds r25,overflow_ms+1
  78 005c A091 0000 		lds r26,overflow_ms+2
  79 0060 B091 0000 		lds r27,overflow_ms+3
  80 0064 0196      		adiw r24,1
  81 0066 A11D      		adc r26,__zero_reg__
  82 0068 B11D      		adc r27,__zero_reg__
  83 006a 8093 0000 		sts overflow_ms,r24
  84 006e 9093 0000 		sts overflow_ms+1,r25
  85 0072 A093 0000 		sts overflow_ms+2,r26
  86 0076 B093 0000 		sts overflow_ms+3,r27
  17:avr_time.c    **** 	for(; timer0_ticks > CLOCK_TICKS_PER_MS; timer0_ticks -= CLOCK_TICKS_PER_MS)
  87               		.loc 1 17 0 discriminator 2
  88 007a 8091 0000 		lds r24,timer0_ticks
  89 007e 9091 0000 		lds r25,timer0_ticks+1
  90 0082 A091 0000 		lds r26,timer0_ticks+2
  91 0086 B091 0000 		lds r27,timer0_ticks+3
  92 008a 8054      		subi r24,64
  93 008c 9F41      		sbci r25,31
  94 008e A109      		sbc r26,__zero_reg__
  95 0090 B109      		sbc r27,__zero_reg__
  96 0092 00C0      		rjmp .L4
  97               	.L6:
  98               	/* epilogue start */
  20:avr_time.c    **** 	}
  21:avr_time.c    **** }
  99               		.loc 1 21 0
 100 0094 BF91      		pop r27
 101 0096 AF91      		pop r26
 102 0098 9F91      		pop r25
 103 009a 8F91      		pop r24
 104 009c 2F91      		pop r18
 105 009e 0F90      		pop r0
 106 00a0 0FBE      		out __SREG__,r0
 107 00a2 0F90      		pop r0
 108 00a4 1F90      		pop r1
 109 00a6 1895      		reti
 110               		.cfi_endproc
 111               	.LFE0:
 113               	.global	avr_time_init
 115               	avr_time_init:
 116               	.LFB1:
  22:avr_time.c    **** 
  23:avr_time.c    **** // Initialize the 8-bit Timer 0.
  24:avr_time.c    **** void avr_time_init(void)
  25:avr_time.c    **** {
 117               		.loc 1 25 0
 118               		.cfi_startproc
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
  26:avr_time.c    **** 	// Prescale Timer 0 to devide by 64
  27:avr_time.c    **** 	TCCR0 |= (1<<CS01) | (1<<CS00);
 123               		.loc 1 27 0
 124 00a8 83B7      		in r24,0x33
 125 00aa 8360      		ori r24,lo8(3)
 126 00ac 83BF      		out 0x33,r24
  28:avr_time.c    **** 	// Enable Timer 0 overflow interrupt
  29:avr_time.c    **** 	TIMSK |= (1<<TOIE0);
 127               		.loc 1 29 0
 128 00ae 89B7      		in r24,0x39
 129 00b0 8160      		ori r24,lo8(1)
 130 00b2 89BF      		out 0x39,r24
 131 00b4 0895      		ret
 132               		.cfi_endproc
 133               	.LFE1:
 135               	.global	avr_time_now
 137               	avr_time_now:
 138               	.LFB2:
  30:avr_time.c    **** }
  31:avr_time.c    **** 
  32:avr_time.c    **** // Get the current time in milliseconds
  33:avr_time.c    **** uint32_t avr_time_now(void)
  34:avr_time.c    **** {
 139               		.loc 1 34 0
 140               		.cfi_startproc
 141               	/* prologue: function */
 142               	/* frame size = 0 */
 143               	/* stack size = 0 */
 144               	.L__stack_usage = 0
  35:avr_time.c    **** 	uint32_t now;
  36:avr_time.c    **** 
  37:avr_time.c    **** 	// Disable interrupts
  38:avr_time.c    **** 	cli();
 145               		.loc 1 38 0
 146               	/* #APP */
 147               	 ;  38 "avr_time.c" 1
 148 00b6 F894      		cli
 149               	 ;  0 "" 2
  39:avr_time.c    **** 	now = overflow_ms;
 150               		.loc 1 39 0
 151               	/* #NOAPP */
 152 00b8 6091 0000 		lds r22,overflow_ms
 153 00bc 7091 0000 		lds r23,overflow_ms+1
 154 00c0 8091 0000 		lds r24,overflow_ms+2
 155 00c4 9091 0000 		lds r25,overflow_ms+3
 156               	.LVL0:
  40:avr_time.c    **** 	sei();
 157               		.loc 1 40 0
 158               	/* #APP */
 159               	 ;  40 "avr_time.c" 1
 160 00c8 7894      		sei
 161               	 ;  0 "" 2
  41:avr_time.c    **** 
  42:avr_time.c    **** 	return now;
  43:avr_time.c    **** }
 162               		.loc 1 43 0
 163               	/* #NOAPP */
 164 00ca 0895      		ret
 165               		.cfi_endproc
 166               	.LFE2:
 168               		.local	overflow_ms
 169               		.comm	overflow_ms,4,1
 170               		.local	timer0_ticks
 171               		.comm	timer0_ticks,4,1
 172               	.Letext0:
 173               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 avr_time.c
     /tmp/ccUgFwza.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccUgFwza.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccUgFwza.s:4      *ABS*:0000003f __SREG__
     /tmp/ccUgFwza.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccUgFwza.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccUgFwza.s:12     .text:00000000 __vector_11
     /tmp/ccUgFwza.s:169    .bss:00000004 timer0_ticks
                             .bss:00000000 overflow_ms
     /tmp/ccUgFwza.s:115    .text:000000a8 avr_time_init
     /tmp/ccUgFwza.s:137    .text:000000b6 avr_time_now

UNDEFINED SYMBOLS
__do_clear_bss
